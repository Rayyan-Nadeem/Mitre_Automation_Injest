ID,name,description,url,created,last modified,version,tactics,detection,platforms,data sources,is sub-technique,sub-technique of,defenses bypassed,contributors,permissions required,supports remote,system requirements,impact type,effective permissions,relationship citations
T1027.004,Obfuscated Files or Information: Compile After Delivery,"Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)

Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a [Phishing](https://attack.mitre.org/techniques/T1566). Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac)",https://attack.mitre.org/techniques/T1027/004,16 March 2020,29 March 2020,1.0,Defense Evasion,"Monitor the execution file paths and command-line arguments for common compilers, such as csc.exe and GCC/MinGW, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior. The compilation of payloads may also generate file creation and/or file write events. Look for non-native binary formats and cross-platform compiler and execution frameworks like Mono and determine if they have a legitimate purpose on the system.(Citation: TrendMicro WindowsAppMac) Typically these should only be used in specific and limited cases, like for software development.","['Linux', 'Windows', 'macOS']","Command: Command Execution, File: File Creation, File: File Metadata, Process: Process Creation",True,T1027,"['Anti-virus', 'Binary Analysis', 'Host intrusion prevention systems', 'Signature-based detection', 'Static File Analysis']","Praetorian; Ye Yint Min Thu Htut, Offensive Security Team, DBS Bank",['User'],,Compiler software (either native to the system or delivered by the adversary),,,"(Citation: Anomali Rocke March 2019),(Citation: MSTIC FoggyWeb September 2021),(Citation: Trend Micro njRAT 2018),(Citation: ESET Gamaredon June 2020),(Citation: PaloAlto CardinalRat Apr 2017),(Citation: Prevailion DarkWatchman 2021),(Citation: ClearSky MuddyWater Nov 2018),"
T1027,Obfuscated Files or Information,"Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. 

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript. 

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) ",https://attack.mitre.org/techniques/T1027,31 May 2017,30 March 2023,1.4,Defense Evasion,"Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). 

Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''""'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads. (Citation: GitHub Revoke-Obfuscation) (Citation: FireEye Revoke-Obfuscation July 2017) (Citation: GitHub Office-Crackros Aug 2016) 

Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. 

The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network. ","['Linux', 'Windows', 'macOS']","Command: Command Execution, File: File Creation, File: File Metadata, Module: Module Load, Process: OS API Execution, Process: Process Creation, Script: Script Execution, WMI: WMI Creation, Windows Registry: Windows Registry Key Creation",False,,"['Web Content Filters', 'Static File Analysis', 'Binary Analysis', 'Log analysis', 'Anti-virus', 'Signature-based detection', 'Heuristic detection', 'Host intrusion prevention systems']","Christiaan Beek, @ChristiaanBeek; Red Canary",,,,,,"(Citation: Cybereason Kimsuky November 2020),(Citation: Talos Kimsuky Nov 2021),(Citation: Cisco Ukraine Wipers January 2022),(Citation: ESET EvilNum July 2020),(Citation: CISA ComRAT Oct 2020),(Citation: TrendMicro EarthLusca 2022),(Citation: CoinTicker 2019),(Citation: ESET Carbon Mar 2017),(Citation: Kaspersky Turla),(Citation: Crowdstrike Indrik November 2018),(Citation: ESET LightNeuron May 2019),(Citation: Symantec Security Center Trojan.Kwampirs),(Citation: FireEye Clandestine Wolf),(Citation: Unit 42 NOKKI Sept 2018),(Citation: Checkpoint Dridex Jan 2021),(Citation: Radware Micropsia July 2018),(Citation: Talos Cobalt Strike September 2020),(Citation: Fidelis INOCNATION),(Citation: FireEye Fin8 May 2016),(Citation: MacKeeper Bundlore Apr 2019),(Citation: Lazarus APT January 2022),(Citation: Recorded Future REDDELTA July 2020),(Citation: Crowdstrike DriveSlayer February 2022),(Citation: Symantec Darkmoon Aug 2005),(Citation: CitizenLab KeyBoy Nov 2016),(Citation: MalwareBytes WoodyRAT Aug 2022),(Citation: Unit 42 Valak July 2020),(Citation: Proofpoint Operation Transparent Tribe March 2016),(Citation: FireEye FIN7 Oct 2019),(Citation: FireEye APT28),(Citation: Novetta Blockbuster),(Citation: Mandiant APT1 Appendix),(Citation: ESET Hermetic Wizard March 2022),(Citation: McAfee Sharpshooter December 2018),(Citation: Unit 42 CARROTBAT November 2018),(Citation: Unit42 BendyBear Feb 2021),(Citation: Unit42 Redaman January 2019),(Citation: ESET Operation Spalax Jan 2021),(Citation: ESET Grandoreiro April 2020),(Citation: FireEye CARBANAK June 2017),(Citation: ThreatConnect Kimsuky September 2020),(Citation: Microsoft FinFisher March 2018),(Citation: FireEye NETWIRE March 2019),(Citation: Palo Alto Comnie),(Citation: Securelist APT10 March 2021),(Citation: Malwarebytes SmokeLoader 2016),(Citation: FireEye POSHSPY April 2017),(Citation: Symantec Frutas Feb 2013),(Citation: ClearSky Lazarus Aug 2020),(Citation: Secureworks BRONZE PRESIDENT December 2019),(Citation: Securelist ScarCruft May 2019),(Citation: PaloAlto UBoatRAT Nov 2017),(Citation: Checkpoint MosesStaff Nov 2021),(Citation: PWC Cloud Hopper Technical Annex April 2017),(Citation: Aqua TeamTNT August 2020),(Citation: ESET Turla Mosquito Jan 2018),(Citation: FireEye HAWKBALL Jun 2019),(Citation: Securelist Brazilian Banking Malware July 2020),(Citation: DFIR Conti Bazar Nov 2021),(Citation: Leonardo Turla Penquin May 2020),(Citation: CheckPoint SpeakUp Feb 2019),(Citation: FireEye FiveHands April 2021),(Citation: Trend Micro Daserf Nov 2017),(Citation: Group IB GrimAgent July 2021),(Citation: ESET Kobalos Feb 2021),(Citation: Palo Alto Shamoon Nov 2016),(Citation: Symantec Buckeye),(Citation: Palo Alto Brute Ratel July 2022),(Citation: ASERT InnaputRAT April 2018),(Citation: Trend Micro Iron Tiger April 2021),(Citation: Proofpoint TA416 November 2020),(Citation: Trend Micro Waterbear December 2019),(Citation: Dell Sakula),(Citation: Symantec Elderwood Sept 2012),(Citation: Cisco Talos Bitter Bangladesh May 2022),(Citation: Secureworks REvil September 2019),(Citation: Cyberint Qakbot May 2021),(Citation: PaloAlto CardinalRat Apr 2017),(Citation: Securelist LuckyMouse June 2018),(Citation: SentinelLabs Metador Sept 2022),(Citation: Intezer HiddenWasp Map 2019),(Citation: Lookout Dark Caracal Jan 2018),(Citation: Unit 42 VERMIN Jan 2018),(Citation: Check Point Sunburst Teardrop December 2020),(Citation: Unit 42 Siloscape Jun 2021),(Citation: ESET OceanLotus),(Citation: ESET BackdoorDiplomacy Jun 2021),(Citation: Trend Micro Tick November 2019),(Citation: McAfee Sodinokibi October 2019),(Citation: Trend Micro DRBControl February 2020),(Citation: FireEye APT10 Sept 2018),(Citation: Trend Micro Muddy Water March 2021),(Citation: Trend Micro KillDisk 1),(Citation: McAfee Lazarus Nov 2020),(Citation: TrendMicro macOS Dacls May 2020),(Citation: McAfee Cuba April 2021),(Citation: Citizen Lab Group5),(Citation: S2 Grupo TrickBot June 2017),(Citation: Trend Micro Skidmap),(Citation: Malwarebytes Pony April 2016),(Citation: OilRig New Delivery Oct 2017),(Citation: Malwarebytes Higaisa 2020),(Citation: ESET Casbaneiro Oct 2019),(Citation: GDATA Zeus Panda June 2017),(Citation: F-Secure CozyDuke),(Citation: Dell TG-3390),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: Talos Smoke Loader July 2018),(Citation: Trend Micro TeamTNT),(Citation: Unit 42 QUADAGENT July 2018),(Citation: SentinelLabs Metador Technical Appendix Sept 2022),(Citation: Malwarebytes Agent Tesla April 2020),(Citation: ESET PipeMon May 2020),(Citation: Talos PoetRAT April 2020),(Citation: Lotus Blossom Dec 2015),(Citation: Prevx Carberp March 2011),(Citation: Kaspersky ThreatNeedle Feb 2021),(Citation: Threatpost Hancitor),(Citation: CopyKittens Nov 2015),(Citation: NSA/FBI Drovorub August 2020),(Citation: Cybereason Soft Cell June 2019),(Citation: MSTIC Nobelium Toolset May 2021),(Citation: ESET GreyEnergy Oct 2018),(Citation: Proofpoint TA505 Jan 2019),(Citation: Accenture HyperStack October 2020),(Citation: Securelist ShadowPad Aug 2017),(Citation: Emissary Trojan Feb 2016),(Citation: F-Secure Sofacy 2015),(Citation: G Data Sodinokibi June 2019),(Citation: Bitdefender StrongPity June 2020),(Citation: Palo Alto DNS Requests),(Citation: RecordedFuture WhisperGate Jan 2022),(Citation: Secureworks MCMD July 2019),(Citation: ESET ForSSHe December 2018),(Citation: NTT Security Flagpro new December 2021),(Citation: ESET InvisiMole June 2018),(Citation: FireEye Hancitor),(Citation: CrowdStrike Putter Panda),(Citation: Proofpoint TA505 Sep 2017),(Citation: SentinelOne Valak June 2020),(Citation: FinFisher Citation),(Citation: Prevailion DarkWatchman 2021),(Citation: ESET OceanLotus Mar 2019),(Citation: Unit 42 OilRig Sept 2018),(Citation: Palo Alto OilRig May 2016),(Citation: Palo Alto Reaver Nov 2017),(Citation: Unit 42 IronNetInjector February 2021 ),(Citation: FireEye SUNSHUTTLE Mar 2021),(Citation: PaloAlto DNS Requests May 2016),(Citation: Anomali MUSTANG PANDA October 2019),(Citation: Talos Promethium June 2020),(Citation: Unit 42 CARROTBAT January 2020),(Citation: objective-see windtail2 jan 2019),(Citation: iSight Sandworm Oct 2014),(Citation: Group IB Ransomware May 2020),(Citation: Juniper IcedID June 2020),(Citation: ESET Operation Groundbait),(Citation: Bitdefender APT28 Dec 2015),(Citation: Kaspersky Lyceum October 2021),(Citation: PaloAlto nulloCore Feb 2016),(Citation: ESET Sednit Part 1),(Citation: FireEye APT32 May 2017),(Citation: Checkpoint IndigoZebra July 2021),(Citation: Mandiant APT41),(Citation: McAfee Lazarus Resurfaces Feb 2018),(Citation: Kaspersky Cloud Atlas December 2014),(Citation: Trustwave GoldenSpy2 June 2020),(Citation: CISA SoreFang July 2016),(Citation: Talos Micropsia June 2017),(Citation: Proofpoint Leviathan Oct 2017),(Citation: MSTIC FoggyWeb September 2021),(Citation: Symantec Remsec IOCs),(Citation: CISA AA20-259A Iran-Based Actor September 2020),(Citation: FireEye FELIXROOT July 2018),(Citation: Fysbis Dr Web Analysis),(Citation: Unit 42 Magic Hound Feb 2017),(Citation: Proofpoint Bumblebee April 2022),(Citation: Zscaler Higaisa 2020),(Citation: MalwareBytes SideCopy Dec 2021),(Citation: MDSec Brute Ratel August 2022),(Citation: Malwarebytes RokRAT VBA January 2021),(Citation: Symantec Cicada November 2020),(Citation: BlackBerry CostaRicto November 2020),(Citation: McAfee Night Dragon),(Citation: GitHub Invoke-Obfuscation),(Citation: BlackBerry Bahamut),(Citation: ProofPoint Ursnif Aug 2016),(Citation: ESET Lazarus Jun 2020),(Citation: Secureworks GandCrab and REvil September 2019),(Citation: US-CERT BLINDINGCAN Aug 2020),(Citation: Infoblox Lokibot January 2019),(Citation: Symantec Ukraine Wipers February 2022),(Citation: Bishop Fox Sliver Framework August 2019),(Citation: FOX-IT May 2016 Mofang),(Citation: ESET TeleBots Oct 2018),(Citation: Symantec Gallmaker Oct 2018),(Citation: Symantec Whitefly March 2019),(Citation: Cybereason Bazar July 2020),(Citation: Kaspersky MoleRATs April 2019),(Citation: Palo Alto Sofacy 06-2018),(Citation: Symantec Trojan.Hydraq Jan 2010),(Citation: Volexity InkySquid BLUELIGHT August 2021),(Citation: Unit42 Emissary Panda May 2019),(Citation: Bromium Ursnif Mar 2017),(Citation: Unit 42 Nokki Oct 2018),(Citation: TrendMicro TropicTrooper 2015),(Citation: Kaspersky Lab SynAck May 2018),(Citation: ESET Gelsemium June 2021),(Citation: TrendMicro Tropic Trooper May 2020),(Citation: fsecure nullHaiShu July 2016),(Citation: Proofpoint TA416 Europe March 2022),(Citation: Talos SamSam Jan 2018),(Citation: Novetta Blockbuster RATs),(Citation: Sophos SamSam Apr 2018),(Citation: ClearSky Siamesekitten August 2021),(Citation: Novetta Blockbuster Loaders),(Citation: Securelist Remexi Jan 2019),(Citation: RedCanary Mockingbird May 2020),(Citation: ESET RTM Feb 2017),(Citation: Trend Micro Conficker),(Citation: Cylance Shell Crew Feb 2017),(Citation: Qualys Hermetic Wiper March 2022),(Citation: Microsoft Iranian Threat Actor Trends November 2021),(Citation: McAfee Lazarus Jul 2020),(Citation: Malwarebytes Kimsuky June 2021),(Citation: TrendMicro Tropic Trooper Mar 2018),(Citation: Cyberreason Anchor December 2019),(Citation: ESET InvisiMole June 2020),(Citation: Talos GravityRAT),(Citation: Palo Alto CVE-2015-3113 July 2015),(Citation: Cybereason Oceanlotus May 2017),(Citation: Unit42 OilRig Playbook 2023),(Citation: Palo Alto Unit 42 OutSteel SaintBot February 2022 ),(Citation: Trend Micro njRAT 2018),(Citation: Nccgroup Emissary Panda May 2018),(Citation: CISA EB Aug 2020),(Citation: Talos Bisonal Mar 2020),(Citation: Cyble Sidewinder September 2020),(Citation: Cybereason Bumblebee August 2022),(Citation: ESET Ebury Feb 2014),(Citation: CISA AppleJeus Feb 2021),(Citation: Unit 42 KerrDown February 2019),(Citation: Kaspersky ProjectSauron Technical Analysis),(Citation: Microsoft PLATINUM April 2016),(Citation: Securelist WhiteBear Aug 2017),(Citation: Microsoft NICKEL December 2021),(Citation: ESET Turla PowerShell May 2019),(Citation: ESET OceanLotus macOS April 2019),(Citation: ZScaler Squirrelwaffle Sep 2021),(Citation: SentinelOne Aoqin Dragon June 2022),(Citation: Eset Ramsay May 2020),(Citation: Malwarebytes AvosLocker Jul 2021),(Citation: GitHub Sliver C2),(Citation: US-CERT Volgmer 2 Nov 2017),(Citation: Talos Group123),(Citation: CrowdStrike Wizard Spider October 2020),(Citation: Kaspersky TajMahal April 2019),(Citation: Accenture Lyceum Targets November 2021),(Citation: ESET Gamaredon June 2020),(Citation: Donut Github),(Citation: Cybereason Conti Jan 2021),(Citation: Cylance Dust Storm),(Citation: Carbon Black HotCroissant April 2020),(Citation: Securelist Darkhotel Aug 2015),(Citation: CrowdStrike SUNSPOT Implant January 2021),(Citation: FireEye APT41 March 2020),(Citation: Accenture Hogfish April 2018),(Citation: Unit42 OilRig Nov 2018),(Citation: DustySky),(Citation: Fortinet Agent Tesla April 2018),(Citation: Lotus Blossom Jun 2015),(Citation: ESET LoudMiner June 2019),(Citation: Unit 42 Sofacy Feb 2018),(Citation: CarbonBlack Conti July 2020),(Citation: ESET Dukes October 2019),(Citation: FireEye APT19),(Citation: Crowdstrike Helix Kitten Nov 2018),(Citation: ANSSI Sandworm January 2021),(Citation: ESET Sednit USBStealer 2014),(Citation: Cybereason Cobalt Kitty 2017),(Citation: Accenture SNAKEMACKEREL Nov 2018),(Citation: Malwarebytes Konni Aug 2021),(Citation: Talos Seduploader Oct 2017),(Citation: Glitch-Cat Green Lambert ATTCK Oct 2021),(Citation: NCC Group WastedLocker June 2020),(Citation: Proofpoint ZeroT Feb 2017),(Citation: BlackBerry Amadey 2020),(Citation: Novetta-Axiom),(Citation: Nicolas Falliere, Liam O Murchu, Eric Chien February 2011),(Citation: FBI FLASH APT39 September 2020),(Citation: jRAT Symantec Aug 2018),(Citation: Kaspersky Sofacy),(Citation: Picus Sodinokibi January 2020),(Citation: Unit 42 Hildegard Malware),(Citation: Anomali Rocke March 2019),(Citation: Bitdefender Naikon April 2021),(Citation: SecureList SynAck Doppelgänging May 2018),(Citation: DHS CISA AA22-055A MuddyWater February 2022),(Citation: Secureworks Karagany July 2019),(Citation: HP SVCReady Jun 2022),(Citation: Medium Ali Salem Bumblebee April 2022),(Citation: FireEye Ransomware Feb 2020),(Citation: CISA AR21-126A FIVEHANDS May 2021),(Citation: US-CERT TYPEFRAME June 2018),(Citation: Proofpoint TA505 October 2019),(Citation: McAfee Honeybee),(Citation: Talos Zeus Panda Nov 2017),(Citation: ESET Attor Oct 2019),(Citation: Chronicle Winnti for Linux May 2019),(Citation: Cybereason Valak May 2020),(Citation: TrendMicro MacOS April 2018),(Citation: Novetta Winnti April 2015),(Citation: ATT Sidewinder January 2021),(Citation: FireEye APT34 Dec 2017),(Citation: Cisco H1N1 Part 1),(Citation: Microsoft Deep Dive Solorigate January 2021),(Citation: Secureworks DarkTortilla Aug 2022),(Citation: Bitdefender FunnyDream Campaign November 2020),(Citation: NCSC GCHQ Small Sieve Jan 2022),(Citation: ESET ComRAT May 2020),(Citation: Trustwave Pillowmint June 2020),(Citation: Securelist BlackOasis Oct 2017),(Citation: MSTIC NOBELIUM Mar 2021),(Citation: FireEye APT33 Guardrail),(Citation: Morphisec ShellTea June 2019),(Citation: Microsoft Analyzing Solorigate Dec 2020),(Citation: Medium Metamorfo Apr 2020),(Citation: ESET Sednit Part 2),(Citation: CISA Supernova Jan 2021),(Citation: Crowdstrike MUSTANG PANDA June 2018),(Citation: Forcepoint BITTER Pakistan Oct 2016),(Citation: Arxiv Avaddon Feb 2021),(Citation: Fortinet Diavol July 2021),(Citation: TrendMicro Lazarus Nov 2018),(Citation: McAfee Maze March 2020),(Citation: Talos Remcos Aug 2018),(Citation: Kaspersky StoneDrill 2017),(Citation: Volexity InkySquid RokRAT August 2021),(Citation: Unit 42 Bisonal July 2018),(Citation: Unit 42 Kazuar May 2017),(Citation: Unit 42 OopsIE! Feb 2018),(Citation: CISA MAR-10292089-1.v2 TAIDOOR August 2021),(Citation: NCC Group Team9 June 2020),(Citation: Intel 471 REvil March 2020),(Citation: Forcepoint Monsoon),(Citation: FireEye Periscope March 2018),(Citation: QiAnXin APT-C-36 Feb2019),(Citation: FireEye SUNBURST Backdoor December 2020),(Citation: CheckPoint Naikon May 2020),(Citation: Qualys LolZarus),(Citation: NCC Group Fivehands June 2021),(Citation: Rewterz Sidewinder APT April 2020),(Citation: Netskope Squirrelwaffle Oct 2021),(Citation: Medium S2W WhisperGate January 2022),(Citation: ESET Industroyer),(Citation: SecureWorks August 2019),(Citation: Objective See Green Lambert for OSX Oct 2021),(Citation: Microsoft DUBNIUM July 2016),(Citation: Symantec RAINDROP January 2021),(Citation: VirusBulletin Kimsuky October 2019),(Citation: Microsoft AMSI June 2015),(Citation: win10_asr)"
T1027.001,Obfuscated Files or Information: Binary Padding,"Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. 

Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ) ",https://attack.mitre.org/techniques/T1027/001,05 February 2020,30 March 2023,1.2,Defense Evasion,"Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool.  When executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information Discovery or Lateral Movement, which could be used as event indicators that point to the source file. ","['Linux', 'Windows', 'macOS']",File: File Metadata,True,T1027,"['Anti-virus', 'Signature-based detection']","Martin Jirkal, ESET",,,,,,"(Citation: Avira Mustang Panda January 2020),(Citation: Palo Alto Comnie),(Citation: Proofpoint Leviathan Oct 2017),(Citation: Trend Micro Tick November 2019),(Citation: Group IB GrimAgent July 2021),(Citation: ASERT Donot March 2018),(Citation: ESET Dukes October 2019),(Citation: ESET Sednit Part 2),(Citation: Trend Micro Qakbot May 2020),(Citation: FireEye APT28),(Citation: ESET Gelsemium June 2021),(Citation: Cybereason Cobalt Kitty 2017),(Citation: SentinelOne NobleBaron June 2021),(Citation: Zscaler Higaisa 2020),(Citation: Symantec Orangeworm April 2018),(Citation: Secureworks BRONZE BUTLER Oct 2017),(Citation: TrendMicro POWERSTATS V3 June 2019),(Citation: Palo Alto Unit 42 OutSteel SaintBot February 2022 ),(Citation: NCC Group WastedLocker June 2020),(Citation: Group IB Ransomware September 2020),(Citation: ESET Gamaredon June 2020),(Citation: BlackBerry CostaRicto November 2020),(Citation: Securelist Brazilian Banking Malware July 2020),(Citation: FinFisher Citation),(Citation: Proofpoint ZeroT Feb 2017),(Citation: Carbon Black HotCroissant April 2020),(Citation: Sophos SamSam Apr 2018),(Citation: CISA MAR-10288834-2.v1  TAINTEDSCRIBE MAY 2020),(Citation: ESET OceanLotus Mar 2019),(Citation: Haq 2014),(Citation: McAfee Maze March 2020),(Citation: ESET Grandoreiro April 2020),(Citation: Talos Bisonal Mar 2020),(Citation: Microsoft FinFisher March 2018),(Citation: TrendMicro Patchwork Dec 2017),(Citation: Check Point Black Basta October 2022),(Citation: ESET OceanLotus),(Citation: Emissary Trojan Feb 2016),"
T1027.002,Obfuscated Files or Information: Software Packing,"Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018) 

Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citation: Awesome Executable Packing)  ",https://attack.mitre.org/techniques/T1027/002,05 February 2020,30 March 2023,1.2,Defense Evasion,"Use file scanning to look for known software packers or artifacts of packing techniques. Packing is not a definitive indicator of malicious activity, because legitimate software may use packing techniques to reduce binary size or to protect proprietary code.","['Linux', 'Windows', 'macOS']",File: File Metadata,True,T1027,"['Anti-virus', 'Heuristic detection', 'Signature-based detection']","Filip Kafka, ESET",,,,,,"(Citation: Cybereason Kimsuky November 2020),(Citation: Cylance Shaheen Nov 2018),(Citation: Kaspersky Adwind Feb 2016),(Citation: Trend Micro DRBControl February 2020),(Citation: Lee 2013),(Citation: ESET Dukes October 2019),(Citation: McAfee Lazarus Nov 2020),(Citation: McAfee Cuba April 2021),(Citation: S2 Grupo TrickBot June 2017),(Citation: Accenture SNAKEMACKEREL Nov 2018),(Citation: NHS Digital Egregor Nov 2020),(Citation: Trend Micro Emotet Jan 2019),(Citation: BlackBerry CostaRicto November 2020),(Citation: FireEye APT38 Oct 2018),(Citation: FireEye Clandestine Wolf),(Citation: Proofpoint ZeroT Feb 2017),(Citation: McAfee Night Dragon),(Citation: Cybereason Astaroth Feb 2019),(Citation: Lunghi Iron Tiger Linux),(Citation: Unit42 Molerat Mar 2020),(Citation: US-CERT BLINDINGCAN Aug 2020),(Citation: Infoblox Lokibot January 2019),(Citation: Zscaler Bazar September 2020),(Citation: FOX-IT May 2016 Mofang),(Citation: Unit 42 Hildegard Malware),(Citation: Cybereason Bazar July 2020),(Citation: Trend Micro TeamTNT),(Citation: Anomali Rocke March 2019),(Citation: Sogeti CERT ESEC Babuk March 2021),(Citation: Secureworks Karagany July 2019),(Citation: Unit 42 SeaDuke 2015),(Citation: hexed osx.dok analysis 2019),(Citation: Fortinet Metamorfo Feb 2020),(Citation: Malwarebytes Saint Bot April 2021),(Citation: Cybereason Soft Cell June 2019),(Citation: Medium Babuk February 2021),(Citation: ESET GreyEnergy Oct 2018),(Citation: Cisco H1N1 Part 1),(Citation: ESET Operation Spalax Jan 2021),(Citation: Securelist Dropping Elephant),(Citation: Microsoft Deep Dive Solorigate January 2021),(Citation: Mcafee Clop Aug 2019),(Citation: Kaspersky Tomiris Sep 2021),(Citation: Mandiant No Easy Breach),(Citation: Cyble Egregor Oct 2020),(Citation: Securelist BlackOasis Oct 2017),(Citation: McAfee Lazarus Jul 2020),(Citation: Malwarebytes Kimsuky June 2021),(Citation: Securelist APT10 March 2021),(Citation: Cyberreason Anchor December 2019),(Citation: Symantec Waterbug),(Citation: IBM TA505 April 2020),(Citation: ASERT Donot March 2018),(Citation: ClearSky Lazarus Aug 2020),(Citation: Malwarebytes KONNI Evolves Jan 2022),(Citation: Red Canary NETWIRE January 2020),(Citation: Check Point APT31 February 2021),(Citation: Symantec Dragonfly),(Citation: Palo Alto Unit 42 OutSteel SaintBot February 2022 ),(Citation: Securelist Brazilian Banking Malware July 2020),(Citation: SentinelOne Valak June 2020),(Citation: FinFisher Citation),(Citation: FireEye APT39 Jan 2019),(Citation: Malwarebytes DarkComet March 2018),(Citation: Unit42 Sofacy Dec 2018),(Citation: Talos Bisonal Mar 2020),(Citation: McAfee Babuk February 2021),(Citation: Talos Rocke August 2018),(Citation: FireEye SUNSHUTTLE Mar 2021),(Citation: Trend Micro Daserf Nov 2017),(Citation: Unit 42 Lucifer June 2020),(Citation: Cybereason Clop Dec 2020),(Citation: Unit 42 OopsIE! Feb 2018),(Citation: APT3 Adversary Emulation Plan),(Citation: Trend Micro Iron Tiger April 2021),(Citation: ESET OceanLotus macOS April 2019),(Citation: ZScaler Squirrelwaffle Sep 2021),(Citation: SentinelOne Aoqin Dragon June 2022),(Citation: Netskope Squirrelwaffle Oct 2021),(Citation: Juniper IcedID June 2020),(Citation: ESET Machete July 2019),(Citation: Symantec Elderwood Sept 2012),(Citation: Dragos Crashoverride 2018),(Citation: Donut Github),(Citation: Cyberint Qakbot May 2021),(Citation: Symantec RAINDROP January 2021),(Citation: Cylance Dust Storm),(Citation: Carbon Black HotCroissant April 2020),(Citation: Lookout Dark Caracal Jan 2018),(Citation: Mandiant APT41),(Citation: BitDefender Chafer May 2020),(Citation: Unit 42 VERMIN Jan 2018),(Citation: Unit 42 Rocke January 2019),(Citation: Malwarebytes Dyreza November 2015),"
T1027.003,Obfuscated Files or Information: Steganography,"Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.

[Duqu](https://attack.mitre.org/software/S0038) was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server.(Citation: Wikipedia Duqu) 

By the end of 2017, a threat group used <code>Invoke-PSImage</code> to hide [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands in an image file (.png) and execute the code on a victim's system. In this particular case the [PowerShell](https://attack.mitre.org/techniques/T1059/001) code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.(Citation: McAfee Malicious Doc Targets Pyeongchang Olympics)  ",https://attack.mitre.org/techniques/T1027/003,05 February 2020,30 March 2023,1.2,Defense Evasion,Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings or other signatures left in system artifacts related to decoding steganography.,"['Linux', 'Windows', 'macOS']",File: File Metadata,True,T1027,,,,,,,,"(Citation: Talos Oblique RAT March 2021),(Citation: Unit 42 TA551 Jan 2021),(Citation: Volexity PowerDuke November 2016),(Citation: ESET Okrum July 2019),(Citation: ESET Dukes October 2019),(Citation: TrendMicro EarthLusca 2022),(Citation: TrendMicro Tropic Trooper May 2020),(Citation: Securelist ScarCruft May 2019),(Citation: ClearSky MuddyWater Nov 2018),(Citation: Juniper IcedID June 2020),(Citation: Talos Group123),(Citation: CheckPoint Bandook Nov 2020),(Citation: Group IB Ransomware September 2020),(Citation: Unit42 RDAT July 2020),(Citation: Antiy CERT Ramsay April 2020),(Citation: Symantec RAINDROP January 2021),(Citation: Fortinet Diavol July 2021),(Citation: MalwareBytes Lazarus-Andariel Conceals Code April 2021),(Citation: ESET Operation Spalax Jan 2021),(Citation: GitHub Invoke-PSImage),(Citation: CISA AA21-200A APT40 July 2021),(Citation: Kaspersky Andariel Ransomware June 2021),(Citation: Trend Micro Tick November 2019),"
T1027.005,Obfuscated Files or Information: Indicator Removal from Tools,"Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.

A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",https://attack.mitre.org/techniques/T1027/005,19 March 2020,28 April 2022,1.1,Defense Evasion,"The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.","['Linux', 'Windows', 'macOS']",Application Log: Application Log Content,True,T1027,"['Anti-virus', 'Host intrusion prevention systems', 'Log analysis', 'Signature-based detection']",,,,,,,"(Citation: Symantec Black Vine),(Citation: Trend Micro Daserf Nov 2017),(Citation: ESET Gazer Aug 2017),(Citation: APT3 Adversary Emulation Plan),(Citation: ESET InvisiMole June 2020),(Citation: Talos GravityRAT),(Citation: cobaltstrike manual),(Citation: FoxIT Wocao December 2019),(Citation: Trend Micro Waterbear December 2019),(Citation: FireEye TEMP.Veles 2018),(Citation: Cyberint Qakbot May 2021),(Citation: Cybereason Soft Cell June 2019),(Citation: Palo Alto OilRig April 2017),(Citation: Crowdstrike Qakbot October 2020),(Citation: GitHub PowerSploit May 2012),(Citation: CrowdStrike SUNSPOT Implant January 2021),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: PowerSploit Documentation),(Citation: Leonardo Turla Penquin May 2020),(Citation: Unit42 OilRig Nov 2018),(Citation: TrendMicro Patchwork Dec 2017),"
T1027.006,Obfuscated Files or Information: HTML Smuggling,"Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.(Citation: HTML Smuggling Menlo Security 2020)(Citation: Outlflank HTML Smuggling 2018)

Adversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as <code>text/plain</code> and/or <code>text/html</code>. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140)), potentially bypassing content filters.

For example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as <code>msSaveBlob</code>.(Citation: HTML Smuggling Menlo Security 2020)(Citation: MSTIC NOBELIUM May 2021)(Citation: Outlflank HTML Smuggling 2018)(Citation: nccgroup Smuggling HTA 2017)",https://attack.mitre.org/techniques/T1027/006,20 May 2021,19 May 2022,1.0,Defense Evasion,"Detection of HTML Smuggling is difficult as HTML5 and JavaScript attributes are used by legitimate services and applications. HTML Smuggling can be performed in many ways via JavaScript, developing rules for the different variants, with a combination of different encoding and/or encryption schemes, may be very challenging.(Citation: Outlflank HTML Smuggling 2018) Detecting specific JavaScript and/or HTML5 attribute strings such as <code>Blob</code>, <code>msSaveOrOpenBlob</code>, and/or <code>download</code> may be a good indicator of HTML Smuggling. These strings may also be used by legitimate services therefore it is possible to raise false positives.

Consider monitoring files downloaded from the Internet, possibly by HTML Smuggling, for suspicious activities. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities.","['Linux', 'Windows', 'macOS']",File: File Creation,True,T1027,"['Anti-virus', 'Static File Analysis', 'Web Content Filters']","Jonathan Boucher, @crash_wave, Bank of Canada; Krishnull Subramanian, @krish203; Stan Hegt, Outflank; Vinay Pidathala",,,,,,"(Citation: MSTIC Nobelium Toolset May 2021),(Citation: Deep Instinct Black Basta August 2022),(Citation: Trend Micro Black Basta October 2022),(Citation: ESET T3 Threat Report 2021),"
T1027.007,Obfuscated Files or Information: Dynamic API Resolution,"Adversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various [Native API](https://attack.mitre.org/techniques/T1106) functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.

API functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions.(Citation: Huntress API Hash)(Citation: IRED API Hashing)

To avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to [Software Packing](https://attack.mitre.org/techniques/T1027/002), dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime.

Various methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such as `GetProcAddress()` and `LoadLibrary()`. These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms of [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) during execution).(Citation: BlackHat API Packers)(Citation: Drakonia HInvoke)(Citation: Huntress API Hash)",https://attack.mitre.org/techniques/T1027/007,22 August 2022,23 August 2022,1.0,Defense Evasion,,['Windows'],"File: File Metadata, Module: Module Load, Process: OS API Execution",True,T1027,,,,,,,,"(Citation: Malwarebytes AvosLocker Jul 2021),(Citation: Lazarus APT January 2022),(Citation: Microsoft Actinium February 2022),(Citation: NCC Group Team9 June 2020),(Citation: Palo Alto Brute Ratel July 2022),(Citation: Cybereason Bazar July 2020),"
T1027.008,Obfuscated Files or Information: Stripped Payloads,"Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system’s `linker` when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads.(Citation: Mandiant golang stripped binaries explanation)(Citation: intezer stripped binaries elf files 2018)

Adversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version of [AppleScript](https://attack.mitre.org/techniques/T1059/002), to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.(Citation: SentinelLabs reversing run-only applescripts 2021)",https://attack.mitre.org/techniques/T1027/008,29 September 2022,20 October 2022,1.0,Defense Evasion,,"['Linux', 'Windows', 'macOS']",File: File Metadata,True,T1027,,,,,,,,"(Citation: SentinelLabs reversing run-only applescripts 2021),"
T1027.009,Obfuscated Files or Information: Embedded Payloads,"Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to [Subvert Trust Controls](https://attack.mitre.org/techniques/T1553) by not impacting execution controls such as digital signatures and notarization tickets.(Citation: Sentinel Labs) 

Adversaries may embed payloads in various file formats to hide payloads.(Citation: Microsoft Learn) This is similar to [Steganography](https://attack.mitre.org/techniques/T1027/003), though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats.(Citation: GitHub PSImage) 

For example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary.(Citation: Securelist Dtrack2) Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format.(Citation: SentinelLabs reversing run-only applescripts 2021) 

Embedded content may also be used as [Process Injection](https://attack.mitre.org/techniques/T1055) payloads used to infect benign system processes.(Citation: Trend Micro) These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.(Citation: Malware Analysis Report ComRAT)",https://attack.mitre.org/techniques/T1027/009,30 September 2022,21 October 2022,1.0,Defense Evasion,,"['Linux', 'Windows', 'macOS']","File: File Creation, File: File Metadata",True,T1027,,"Nick Cairns, @grotezinfosec",,,User,,,"(Citation: Microsoft Unidentified Dec 2018),(Citation: Mandiant APT41),(Citation: TrendMicro Netwalker May 2020),(Citation: GitHub PSImage),(Citation: FireEye SMOKEDHAM June 2021),(Citation: Securelist Dtrack),(Citation: SentinelLabs reversing run-only applescripts 2021),(Citation: CISA ComRAT Oct 2020),(Citation: ESET ComRAT May 2020),(Citation: win10_asr)"
T1027.010,Obfuscated Files or Information: Command Obfuscation,"Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., [Phishing](https://attack.mitre.org/techniques/T1566) and [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)) or interactively via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: Akamai JS)(Citation: Malware Monday VBE)

For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality.(Citation: RC PowerShell) Many languages support built-in obfuscation in the form of base64 or URL encoding.(Citation: Microsoft PowerShellB64) Adversaries may also manually implement command obfuscation via string splitting (`“Wor”+“d.Application”`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.(Citation: Bashfuscator Command Obfuscators)(Citation: FireEye Obfuscation June 2017)

Adversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\voi\pcw\..\..\Windows\tei\qs\k\..\..\..\system32\erool\..\wbem\wg\je\..\..\wmic.exe shadowcopy delete`).(Citation: Twitter Richard WMIC)

Tools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.(Citation: Invoke-DOSfuscation)(Citation: Invoke-Obfuscation)",https://attack.mitre.org/techniques/T1027/010,14 March 2023,24 March 2023,1.0,Defense Evasion,,"['Linux', 'Windows', 'macOS']","Command: Command Execution, File: File Metadata, Script: Script Execution",True,T1027,,George Thomas; Tim Peck; TruKno,,,,,,"(Citation: Bitdefender FIN8 July 2021),(Citation: ESET LoudMiner June 2019),(Citation: Trend Micro Muddy Water March 2021),(Citation: CISA AA20-259A Iran-Based Actor September 2020),(Citation: CISA ComRAT Oct 2020),(Citation: FireEye APT19),(Citation: Cybereason OperationCuckooBees May 2022),(Citation: Unit 42 Magic Hound Feb 2017),(Citation: Cybereason Cobalt Kitty 2017),(Citation: Talos Cobalt Group July 2018),(Citation: Deep Instinct TA505 Apr 2019),(Citation: Flashpoint FIN 7 March 2019),(Citation: TrendMicro Netwalker May 2020),(Citation: Cybereason TA505 April 2019),(Citation: Trend Micro Emotet Jan 2019),(Citation: CrowdStrike Carbon Spider August 2021),(Citation: Visa FIN6 Feb 2019),(Citation: Morphisec Cobalt Gang Oct 2018),(Citation: Cybereason Astaroth Feb 2019),(Citation: GitHub Invoke-Obfuscation),(Citation: Cylance Machete Mar 2017),(Citation: Talos Emotet Jan 2019),(Citation: Cisco Talos Avos Jun 2022),(Citation: Unit 42 BackConfig May 2020),(Citation: Unit 42 QUADAGENT July 2018),(Citation: Unit 42 Valak July 2020),(Citation: Bromium Ursnif Mar 2017),(Citation: objsee mac malware 2017),(Citation: CrowdStrike IceApple May 2022),(Citation: FoxIT Wocao December 2019),(Citation: Unit42 CookieMiner Jan 2019),(Citation: Microsoft Unidentified Dec 2018),(Citation: Talos Zeus Panda Nov 2017),(Citation: Cyber Forensicator Silence Jan 2019),(Citation: ESET Emotet Dec 2018),(Citation: Trend Micro Black Basta October 2022),(Citation: ATT Sidewinder January 2021),(Citation: Unit 42 CARROTBAT November 2018),(Citation: Microsoft Actinium February 2022),(Citation: Securelist MuddyWater Oct 2018),(Citation: Talos PoetRAT October 2020),(Citation: ESET ComRAT May 2020),(Citation: Microsoft Iranian Threat Actor Trends November 2021),(Citation: FireEye Know Your Enemy FIN8 Aug 2016),(Citation: MSTIC NOBELIUM Mar 2021),(Citation: ESET Telebots Dec 2016),(Citation: Talos MuddyWater Jan 2022),(Citation: ClearSky MuddyWater June 2019),(Citation: TrendMicro POWERSTATS V3 June 2019),(Citation: Palo Alto Unit 42 OutSteel SaintBot February 2022 ),(Citation: Prevailion DarkWatchman 2021),(Citation: Cycraft Chimera April 2020),(Citation: DFIR Ryuk's Return October 2020),(Citation: Sophos Netwalker May 2020),(Citation: CrowdStrike AQUATIC PANDA December 2021),(Citation: PowerSploit Documentation),(Citation: Picus Emotet Dec 2018),(Citation: Talos Frankenstein June 2019),(Citation: FireEye FIN7 Aug 2018),(Citation: Unit 42 MuddyWater Nov 2017),(Citation: FireEye Obfuscation June 2017),(Citation: MalwareBytes LazyScripter Feb 2021),(Citation: ESET Turla PowerShell May 2019),(Citation: FireEye Ryuk and Trickbot January 2019),(Citation: ClearSky MuddyWater Nov 2018),(Citation: Rewterz Sidewinder APT April 2020),(Citation: Costa AvosLocker May 2022),(Citation: ESET Machete July 2019),(Citation: Kaspersky Lyceum October 2021),(Citation: Unit 42 DarkHydrus July 2018),(Citation: ESET Gamaredon June 2020),(Citation: Cyberint Qakbot May 2021),(Citation: Symantec Leafminer July 2018),(Citation: Tetra Defense Sodinokibi March 2020),(Citation: GitHub PowerSploit May 2012),(Citation: FireEye APT32 May 2017),(Citation: Talos MuddyWater May 2019),(Citation: Github PowerShell Empire),(Citation: FireEye MuddyWater Mar 2018),(Citation: FireEye APT29 Nov 2018),(Citation: TrendMicro Patchwork Dec 2017),(Citation: Microsoft ASR Obfuscation)"
T1027.011,Obfuscated Files or Information: Fileless Storage,"Adversaries may store data in ""fileless"" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository.(Citation: Microsoft Fileless)(Citation: SecureList Fileless)

Similar to fileless in-memory behaviors such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620) and [Process Injection](https://attack.mitre.org/techniques/T1055), fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage.

Adversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of [Persistence](https://attack.mitre.org/tactics/TA0003)) and collected data not yet exfiltrated from the victim (e.g., [Local Data Staging](https://attack.mitre.org/techniques/T1074/001)). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.

Some forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\System32\Wbem\Repository`) or Registry (e.g., `%SystemRoot%\System32\Config`) physical files.(Citation: Microsoft Fileless) ",https://attack.mitre.org/techniques/T1027/011,23 March 2023,04 May 2023,1.0,Defense Evasion,,['Windows'],"WMI: WMI Creation, Windows Registry: Windows Registry Key Creation",True,T1027,,Christopher Peacock; Denise Tan; Mark Wee; Simona David; Xavier Rousseau,,,,,,"(Citation: Unit 42 QUADAGENT July 2018),(Citation: Trend Micro DRBControl February 2020),(Citation: McAfee Sodinokibi October 2019),(Citation: MSTIC NOBELIUM Mar 2021),(Citation: Intel 471 REvil March 2020),(Citation: ESET PipeMon May 2020),(Citation: Profero APT27 December 2020),(Citation: Unit 42 Valak July 2020),(Citation: ESET Dukes October 2019),(Citation: CISA ComRAT Oct 2020),(Citation: Cybereason OperationCuckooBees May 2022),(Citation: TrendMicro EarthLusca 2022),(Citation: ESET Turla PowerShell May 2019),(Citation: Trend Micro Iron Tiger April 2021),(Citation: FireEye APT28),(Citation: ESET Gelsemium June 2021),(Citation: Kaspersky ThreatNeedle Feb 2021),(Citation: Cybereason Chaes Nov 2020),(Citation: Red Canary NETWIRE January 2020),(Citation: US-CERT TYPEFRAME June 2018),(Citation: ESET Turla Mosquito Jan 2018),(Citation: Symantec Volgmer Aug 2014),(Citation: Group IB Ransomware September 2020),(Citation: Red Canary Qbot),(Citation: Symantec Waterbug Jun 2019),(Citation: Secureworks REvil September 2019),(Citation: Cybereason Valak May 2020),(Citation: US-CERT Volgmer Nov 2017),(Citation: SentinelOne Valak June 2020),(Citation: Prevailion DarkWatchman 2021),(Citation: Cylance Sodinokibi July 2019),(Citation: Kaspersky ShadowPad Aug 2017),(Citation: ESET OceanLotus Mar 2019),(Citation: Talos TinyTurla September 2021),(Citation: Secureworks GandCrab and REvil September 2019),(Citation: ESET Grandoreiro April 2020),(Citation: ESET TeleBots Oct 2018),(Citation: ESET ComRAT May 2020),(Citation: Trustwave Pillowmint June 2020),"
T1055.001,Process Injection: Dynamic-link Library Injection,"Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  

DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) 

Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) 

ullother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/001,14 January 2020,18 October 2022,1.2,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Module: Module Load, Process: OS API Execution, Process: Process Access, Process: Process Metadata, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",Boominathan Sundaram,['User'],,,,,"(Citation: Lotus Blossom Jun 2015),(Citation: Unit 42 IronNetInjector February 2021 ),(Citation: DFIR Ryuk 2 Hour Speed Run November 2020),(Citation: RATANKBA),(Citation: Lazarus APT January 2022),(Citation: Unit 42 Kazuar May 2017),(Citation: CISA MAR-10292089-1.v2 TAIDOOR August 2021),(Citation: Symantec Darkmoon Aug 2005),(Citation: Bitdefender FunnyDream Campaign November 2020),(Citation: Symantec Dyre June 2015),(Citation: FireEye Poison Ivy),(Citation: Lazarus RATANKBA),(Citation: TrendMicro Tropic Trooper Mar 2018),(Citation: ESET PipeMon May 2020),(Citation: Kaspersky ProjectSauron Technical Analysis),(Citation: IBM TA505 April 2020),(Citation: CarbonBlack Conti July 2020),(Citation: Lotus Blossom Dec 2015),(Citation: CISA ComRAT Oct 2020),(Citation: Camba RARSTONE),(Citation: Medium Metamorfo Apr 2020),(Citation: Talos ZxShell Oct 2014),(Citation: Symantec W32.Duqu),(Citation: ESET Gelsemium June 2021),(Citation: TrendMicro Tropic Trooper May 2020),(Citation: CheckPoint Naikon May 2020),(Citation: Proofpoint Bumblebee April 2022),(Citation: ESET Carbon Mar 2017),(Citation: SentinelOne Aoqin Dragon June 2022),(Citation: Eset Ramsay May 2020),(Citation: TrendMicro Patchwork Dec 2017),(Citation: Accenture MUDCARP March 2019),(Citation: TrendMicro Taidoor),(Citation: Github Koadic),(Citation: CopyKittens Nov 2015),(Citation: TrendMicro Netwalker May 2020),(Citation: Proofpoint TA505 October 2019),(Citation: Trend Micro Banking Malware Jan 2019),(Citation: DHS/CISA Ransomware Targeting Healthcare October 2020),(Citation: F-Secure BlackEnergy 2014),(Citation: Accenture Dragonfish Jan 2018),(Citation: Malwarebytes Saint Bot April 2021),(Citation: Secureworks DarkTortilla Aug 2022),(Citation: Kaspersky TajMahal April 2019),(Citation: BlackBerry CostaRicto November 2020),(Citation: CrowdStrike Putter Panda),(Citation: Github Rapid7 Meterpreter Elevate),(Citation: Cybereason Conti Jan 2021),(Citation: FinFisher Citation),(Citation: AlienVault Sykipot 2011),(Citation: IBM MegaCortex),(Citation: GitHub PowerSploit May 2012),(Citation: Kaspersky ShadowPad Aug 2017),(Citation: Airbus Derusbi 2015),(Citation: Sophos Maze VM September 2020),(Citation: McAfee Lazarus Resurfaces Feb 2018),(Citation: ESET ComRAT May 2020),(Citation: DFIR Conti Bazar Nov 2021),(Citation: Nicolas Falliere, Liam O Murchu, Eric Chien February 2011),(Citation: ESET Sednit Part 3),(Citation: McAfee Maze March 2020),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: PowerSploit Documentation),(Citation: BiZone Lizar May 2021),(Citation: Talos Cobalt Strike September 2020),(Citation: Picus Emotet Dec 2018),(Citation: US-CERT Emotet Jul 2018),(Citation: ESET Carberp March 2012),(Citation: Microsoft FinFisher March 2018),(Citation: Symantec Bumblebee June 2022),(Citation: ESET Turla Mosquito May 2018),(Citation: GitHub Pupy),(Citation: ESET BackdoorDiplomacy Jun 2021),"
T1055,Process Injection,"Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. 

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. 

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",https://attack.mitre.org/techniques/T1055,31 May 2017,30 March 2023,1.3,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017) 

Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. 

Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) 

Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.(Citation: Microsoft Sysmon v6 May 2017) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","['Linux', 'Windows', 'macOS']","File: File Metadata, File: File Modification, Module: Module Load, Process: OS API Execution, Process: Process Access, Process: Process Metadata, Process: Process Modification",False,,"['Application control', 'Anti-virus']","Anastasios Pingios; Christiaan Beek, @ChristiaanBeek; Ryan Becwar",,,,,,"(Citation: Cybereason Bumblebee August 2022),(Citation: F-Secure Sofacy 2015),(Citation: Kaspersky QakBot September 2021),(Citation: Group IB Cobalt Aug 2017),(Citation: GitHub SILENTTRINITY Modules July 2019),(Citation: Trend Micro DRBControl February 2020),(Citation: Unit 42 Sofacy Feb 2018),(Citation: Unit42 Emissary Panda May 2019),(Citation: ESET Gazer Aug 2017),(Citation: ESET InvisiMole June 2020),(Citation: Kaspersky StoneDrill 2017),(Citation: MalwareBytes WoodyRAT Aug 2022),(Citation: Microsoft PLATINUM April 2016),(Citation: US-CERT HOPLIGHT Apr 2019),(Citation: Securelist WhiteBear Aug 2017),(Citation: cobaltstrike manual),(Citation: Kroll Qakbot June 2020),(Citation: JPCert BlackTech Malware September 2019),(Citation: ESET Turla PowerShell May 2019),(Citation: Trend Micro Iron Tiger April 2021),(Citation: Trend Micro Qakbot May 2020),(Citation: FoxIT Wocao December 2019),(Citation: Cybereason Cobalt Kitty 2017),(Citation: Medium Eli Salem GuLoader April 2021),(Citation: Fortinet Remcos Feb 2017),(Citation: Malwarebytes Dyreza November 2015),(Citation: Gh0stRAT ATT March 2019),(Citation: Trend Micro Qakbot December 2020),(Citation: Red Canary NETWIRE January 2020),(Citation: Trend Micro Waterbear December 2019),(Citation: GitHub Sliver C2),(Citation: Malwarebytes RokRAT VBA January 2021),(Citation: SentinelLabs Agent Tesla Aug 2020),(Citation: Talos Group123),(Citation: Symantec Dragonfly),(Citation: ESET Attor Oct 2019),(Citation: BlackBerry CostaRicto November 2020),(Citation: Donut Github),(Citation: Trend Micro Black Basta October 2022),(Citation: PaloAlto CardinalRat Apr 2017),(Citation: CISA MAR SLOTHFULMEDIA October 2020),(Citation: SentinelLabs Metador Sept 2022),(Citation: Cylance Dust Storm),(Citation: Check Point Warzone Feb 2020),(Citation: Talos NavRAT May 2018),(Citation: McAfee REvil October 2019),(Citation: TrendMicro Lazarus Nov 2018),(Citation: FireEye APT41 Aug 2019),(Citation: Kaspersky ShadowPad Aug 2017),(Citation: Joe Sec Trickbot),(Citation: NCSC Joint Report Public Tools),(Citation: DFIR Conti Bazar Nov 2021),(Citation: Github PowerShell Empire),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: Symantec Wiarp May 2012),(Citation: BiZone Lizar May 2021),(Citation: GitHub PoshC2),(Citation: CrowdStrike Ryuk January 2019),(Citation: Bishop Fox Sliver Framework August 2019),(Citation: Microsoft SIR Vol 21),(Citation: Gigamon Berserk Bear October 2021),(Citation: Cyble Egregor Oct 2020),(Citation: Talos Smoke Loader July 2018),(Citation: Bitdefender FunnyDream Campaign November 2020),(Citation: Unit 42 IronNetInjector February 2021 ),(Citation: Group IB Silence Sept 2018),(Citation: Cybereason Bazar July 2020),(Citation: Threatpost New Op Sharpshooter Data March 2019),(Citation: Securelist Kimsuky Sept 2013),(Citation: Trend Micro Tick November 2019),(Citation: win10_asr)"
T1055.002,Process Injection: Portable Executable Injection,"Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. 

PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Elastic Process Injection July 2017) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/002,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: GDATA Zeus Panda June 2017),(Citation: BiZone Lizar May 2021),(Citation: ESET InvisiMole June 2020),(Citation: FireEye CARBANAK June 2017),(Citation: Unit 42 Gorgon Group Aug 2018),(Citation: Talos Rocke August 2018),(Citation: ESET GreyEnergy Oct 2018),"
T1055.003,Process Injection: Thread Execution Hijacking,"Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. 

Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)

This is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/003,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: Securelist WhiteBear Aug 2017),(Citation: ESET Gazer Aug 2017),(Citation: Trend Micro Waterbear December 2019),(Citation: Secureworks Karagany July 2019),"
T1055.004,Process Injection: Asynchronous Procedure Call,"Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. 

APC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). 

A variation of APC injection, dubbed ""Early Bird injection"", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/004,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: Bitdefender FIN8 July 2021),(Citation: Prevx Carberp March 2011),(Citation: IBM IcedID November 2017),(Citation: ESET Attor Oct 2019),(Citation: Malwarebytes Saint Bot April 2021),(Citation: Proofpoint Bumblebee April 2022),(Citation: ESET InvisiMole June 2020),(Citation: CyberBit Early Bird Apr 2018),(Citation: Trustwave Pillowmint June 2020),"
T1055.005,Process Injection: Thread Local Storage,"Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. 

TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other [Process Injection](https://attack.mitre.org/techniques/T1055) techniques such as [Process Hollowing](https://attack.mitre.org/techniques/T1055/012).(Citation: FireEye TLS Nov 2017)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/005,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: FireEye Ursnif Nov 2017),(Citation: TrendMicro Ursnif Mar 2015),(Citation: TrendMicro PE_URSNIF.A2),"
T1055.008,Process Injection: Ptrace System Calls,"Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. 

Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>) then invoking that memory with <code>PTRACE_SETREGS</code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) 

Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.(Citation: BH Linux Inject) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/008,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.009,Process Injection: Proc Memory,"Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. 

Proc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/[pid]</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within <code>/proc/[pid]/maps</code> can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) 

Other techniques such as [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) may be used to populate a target process with more available gadgets. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/009,14 January 2020,20 June 2020,1.0,"Defense Evasion, Privilege Escalation","File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],File: File Modification,True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.011,Process Injection: Extra Window Memory Injection,"Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. 

Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)

Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.

Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/011,14 January 2020,10 November 2020,1.0,"Defense Evasion, Privilege Escalation",Monitor for API calls related to enumerating and manipulating EWM such as GetWindowLong (Citation: Microsoft GetWindowLong function) and SetWindowLong (Citation: Microsoft SetWindowLong function). Malware associated with this technique have also used SendNotifyMessage (Citation: Microsoft SendNotifyMessage function) to trigger the associated window procedure and eventual malicious injection. (Citation: Elastic Process Injection July 2017),['Windows'],Process: OS API Execution,True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: ESET Recon Snake Nest),(Citation: MalwareTech Power Loader Aug 2013),(Citation: WeLiveSecurity Gapz and Redyms Mar 2013),"
T1055.012,Process Injection: Process Hollowing,"Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  

Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)

This is very similar to [Thread Local Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/012,14 January 2020,29 November 2021,1.2,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

Processing hollowing commonly involves spawning an otherwise benign victim process. Consider correlating detections of processes created in a suspended state (ex: through API flags or process’ thread metadata) with other malicious activity such as attempts to modify a process' memory, especially by its parent process, or other abnormal process behavior.(Citation: Nviso Spoof Command Line 2020)(Citation: Mandiant Endpoint Evading 2019)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: FireEye Ursnif Nov 2017),(Citation: Palo Alto Networks BBSRAT),(Citation: Unit42 Azorult Nov 2018),(Citation: Proofpoint Leviathan Oct 2017),(Citation: Talos Kimsuky Nov 2021),(Citation: Trend Micro Totbrick Oct 2016),(Citation: Trend Micro DRBControl February 2020),(Citation: NCC Group Team9 June 2020),(Citation: Malwarebytes SmokeLoader 2016),(Citation: Cisco Ukraine Wipers January 2022),(Citation: Profero APT27 December 2020),(Citation: Cyberreason Anchor December 2019),(Citation: MalwareBytes WoodyRAT Aug 2022),(Citation: Forcepoint Monsoon),(Citation: RecordedFuture WhisperGate Jan 2022),(Citation: Microsoft Dofoil 2018),(Citation: Symantec W32.Duqu),(Citation: S2 Grupo TrickBot June 2017),(Citation: Cybereason Cobalt Kitty 2017),(Citation: Secureworks BRONZE PRESIDENT December 2019),(Citation: Microsoft Totbrick Oct 2017),(Citation: Red Canary NETWIRE January 2020),(Citation: OilRig New Delivery Oct 2017),(Citation: SentinelLabs Agent Tesla Aug 2020),(Citation: EFF Manul Aug 2016),(Citation: CheckPoint Bandook Nov 2020),(Citation: Talos Lokibot Jan 2021),(Citation: Palo Alto Unit 42 OutSteel SaintBot February 2022 ),(Citation: Securelist Brazilian Banking Malware July 2020),(Citation: Nccgroup Emissary Panda May 2018),(Citation: Securelist LuckyMouse June 2018),(Citation: Securelist Dtrack),(Citation: Cybereason Astaroth Feb 2019),(Citation: Lookout Dark Caracal Jan 2018),(Citation: Infoblox Lokibot January 2019),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: Cymmetria Patchwork),(Citation: Accenture Hogfish April 2018),(Citation: Unit 42 Gorgon Group Aug 2018),(Citation: FireEye NETWIRE March 2019),(Citation: TrendMicro Patchwork Dec 2017),(Citation: Cobalt Strike TTPs Dec 2017),(Citation: ATT QakBot April 2021),(Citation: Cybereason Bazar July 2020),"
T1055.013,Process Injection: Process Doppelgänging,"Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. 

Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)

Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelgänging Dec 2017)

Adversaries may abuse TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055). Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. (Citation: BlackHat Process Doppelgänging Dec 2017)

Process Doppelgänging is implemented in 4 steps (Citation: BlackHat Process Doppelgänging Dec 2017):

* Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.
* Load – Create a shared section of memory and load the malicious executable.
* Rollback – Undo changes to original executable, effectively removing malicious code from the file system.
* Animate – Create a process from the tainted section of memory and initiate execution.

This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/013,14 January 2020,09 February 2021,1.0,"Defense Evasion, Privilege Escalation","Monitor and analyze calls to <code>CreateTransaction</code>, <code>CreateFileTransacted</code>, <code>RollbackTransaction</code>, and other rarely used functions indicative of TxF activity. Process Doppelgänging also invokes an outdated and undocumented implementation of the Windows process loader via calls to <code>NtCreateProcessEx</code> and <code>NtCreateThreadEx</code> as well as API calls used to modify memory within another process, such as <code>WriteProcessMemory</code>. (Citation: BlackHat Process Doppelgänging Dec 2017) (Citation: hasherezade Process Doppelgänging Dec 2017)

Scan file objects reported during the PsSetCreateProcessNotifyRoutine, (Citation: Microsoft PsSetCreateProcessNotifyRoutine routine) which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access. (Citation: BlackHat Process Doppelgänging Dec 2017) Also consider comparing file objects loaded in memory to the corresponding file on disk. (Citation: hasherezade Process Doppelgänging Dec 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",['Windows'],"File: File Metadata, Process: OS API Execution",True,T1055,"['Anti-virus', 'Application control']",,"['Administrator', 'SYSTEM', 'User']",,,,,"(Citation: Kaspersky Lab SynAck May 2018),(Citation: SecureList SynAck Doppelgänging May 2018),(Citation: NCC Group Team9 June 2020),(Citation: Symantec Leafminer July 2018),(Citation: Cybereason Bazar July 2020),"
T1055.014,Process Injection: VDSO Hijacking,"Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. 

VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via [Ptrace System Calls](https://attack.mitre.org/techniques/T1055/008). However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009)(Citation: Backtrace VDSO)(Citation: VDSO Aug 2005)(Citation: Syscall 2014)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",https://attack.mitre.org/techniques/T1055/014,14 January 2020,07 July 2022,1.1,"Defense Evasion, Privilege Escalation","Monitor for malicious usage of system calls, such as ptrace and mmap, that can be used to attach to, manipulate memory, then redirect a processes' execution path. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)(Citation: GNU Acct)(Citation: RHEL auditd)(Citation: Chokepoint preload rootkits) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],"Module: Module Load, Process: OS API Execution",True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.015,Process Injection: ListPlanting,"Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.

List-view controls are user interface windows used to display collections of items.(Citation: Microsoft List View Controls) Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.

ListPlanting (a form of message-passing ""shatter attack"") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.(Citation: Modexp Windows Process Injection) Adversaries must first copy code into the target process’ memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other [Process Injection](https://attack.mitre.org/techniques/T1055) methods.

Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory.(Citation: ESET InvisiMole June 2020) 

Finally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.",https://attack.mitre.org/techniques/T1055/015,22 November 2021,08 March 2022,1.0,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>FindWindow</code>, <code>FindWindowEx</code>, <code>EnumWindows</code>, <code>EnumChildWindows</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be abused for this technique. 

Consider monitoring for excessive use of <code>SendMessage</code> and/or <code>PostMessage</code> API functions with <code>LVM_SETITEMPOSITION</code> and/or <code>LVM_GETITEMPOSITION</code> arguments.

ullalyze process behavior to determine if a process is performing unusual actions, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Modification",True,T1055,,ESET,['User'],,,,,"(Citation: ESET InvisiMole June 2020),"
T1055.002,Process Injection: Portable Executable Injection,"Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. 

PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Elastic Process Injection July 2017) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/002,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: GDATA Zeus Panda June 2017),(Citation: BiZone Lizar May 2021),(Citation: ESET InvisiMole June 2020),(Citation: FireEye CARBANAK June 2017),(Citation: Unit 42 Gorgon Group Aug 2018),(Citation: Talos Rocke August 2018),(Citation: ESET GreyEnergy Oct 2018),"
T1055,Process Injection,"Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. 

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. 

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",https://attack.mitre.org/techniques/T1055,31 May 2017,30 March 2023,1.3,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017) 

Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. 

Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) 

Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.(Citation: Microsoft Sysmon v6 May 2017) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","['Linux', 'Windows', 'macOS']","File: File Metadata, File: File Modification, Module: Module Load, Process: OS API Execution, Process: Process Access, Process: Process Metadata, Process: Process Modification",False,,"['Application control', 'Anti-virus']","Anastasios Pingios; Christiaan Beek, @ChristiaanBeek; Ryan Becwar",,,,,,"(Citation: Cybereason Bumblebee August 2022),(Citation: F-Secure Sofacy 2015),(Citation: Kaspersky QakBot September 2021),(Citation: Group IB Cobalt Aug 2017),(Citation: GitHub SILENTTRINITY Modules July 2019),(Citation: Trend Micro DRBControl February 2020),(Citation: Unit 42 Sofacy Feb 2018),(Citation: Unit42 Emissary Panda May 2019),(Citation: ESET Gazer Aug 2017),(Citation: ESET InvisiMole June 2020),(Citation: Kaspersky StoneDrill 2017),(Citation: MalwareBytes WoodyRAT Aug 2022),(Citation: Microsoft PLATINUM April 2016),(Citation: US-CERT HOPLIGHT Apr 2019),(Citation: Securelist WhiteBear Aug 2017),(Citation: cobaltstrike manual),(Citation: Kroll Qakbot June 2020),(Citation: JPCert BlackTech Malware September 2019),(Citation: ESET Turla PowerShell May 2019),(Citation: Trend Micro Iron Tiger April 2021),(Citation: Trend Micro Qakbot May 2020),(Citation: FoxIT Wocao December 2019),(Citation: Cybereason Cobalt Kitty 2017),(Citation: Medium Eli Salem GuLoader April 2021),(Citation: Fortinet Remcos Feb 2017),(Citation: Malwarebytes Dyreza November 2015),(Citation: Gh0stRAT ATT March 2019),(Citation: Trend Micro Qakbot December 2020),(Citation: Red Canary NETWIRE January 2020),(Citation: Trend Micro Waterbear December 2019),(Citation: GitHub Sliver C2),(Citation: Malwarebytes RokRAT VBA January 2021),(Citation: SentinelLabs Agent Tesla Aug 2020),(Citation: Talos Group123),(Citation: Symantec Dragonfly),(Citation: ESET Attor Oct 2019),(Citation: BlackBerry CostaRicto November 2020),(Citation: Donut Github),(Citation: Trend Micro Black Basta October 2022),(Citation: PaloAlto CardinalRat Apr 2017),(Citation: CISA MAR SLOTHFULMEDIA October 2020),(Citation: SentinelLabs Metador Sept 2022),(Citation: Cylance Dust Storm),(Citation: Check Point Warzone Feb 2020),(Citation: Talos NavRAT May 2018),(Citation: McAfee REvil October 2019),(Citation: TrendMicro Lazarus Nov 2018),(Citation: FireEye APT41 Aug 2019),(Citation: Kaspersky ShadowPad Aug 2017),(Citation: Joe Sec Trickbot),(Citation: NCSC Joint Report Public Tools),(Citation: DFIR Conti Bazar Nov 2021),(Citation: Github PowerShell Empire),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: Symantec Wiarp May 2012),(Citation: BiZone Lizar May 2021),(Citation: GitHub PoshC2),(Citation: CrowdStrike Ryuk January 2019),(Citation: Bishop Fox Sliver Framework August 2019),(Citation: Microsoft SIR Vol 21),(Citation: Gigamon Berserk Bear October 2021),(Citation: Cyble Egregor Oct 2020),(Citation: Talos Smoke Loader July 2018),(Citation: Bitdefender FunnyDream Campaign November 2020),(Citation: Unit 42 IronNetInjector February 2021 ),(Citation: Group IB Silence Sept 2018),(Citation: Cybereason Bazar July 2020),(Citation: Threatpost New Op Sharpshooter Data March 2019),(Citation: Securelist Kimsuky Sept 2013),(Citation: Trend Micro Tick November 2019),(Citation: win10_asr)"
T1055.001,Process Injection: Dynamic-link Library Injection,"Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  

DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) 

Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) 

ullother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/001,14 January 2020,18 October 2022,1.2,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Module: Module Load, Process: OS API Execution, Process: Process Access, Process: Process Metadata, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",Boominathan Sundaram,['User'],,,,,"(Citation: Lotus Blossom Jun 2015),(Citation: Unit 42 IronNetInjector February 2021 ),(Citation: DFIR Ryuk 2 Hour Speed Run November 2020),(Citation: RATANKBA),(Citation: Lazarus APT January 2022),(Citation: Unit 42 Kazuar May 2017),(Citation: CISA MAR-10292089-1.v2 TAIDOOR August 2021),(Citation: Symantec Darkmoon Aug 2005),(Citation: Bitdefender FunnyDream Campaign November 2020),(Citation: Symantec Dyre June 2015),(Citation: FireEye Poison Ivy),(Citation: Lazarus RATANKBA),(Citation: TrendMicro Tropic Trooper Mar 2018),(Citation: ESET PipeMon May 2020),(Citation: Kaspersky ProjectSauron Technical Analysis),(Citation: IBM TA505 April 2020),(Citation: CarbonBlack Conti July 2020),(Citation: Lotus Blossom Dec 2015),(Citation: CISA ComRAT Oct 2020),(Citation: Camba RARSTONE),(Citation: Medium Metamorfo Apr 2020),(Citation: Talos ZxShell Oct 2014),(Citation: Symantec W32.Duqu),(Citation: ESET Gelsemium June 2021),(Citation: TrendMicro Tropic Trooper May 2020),(Citation: CheckPoint Naikon May 2020),(Citation: Proofpoint Bumblebee April 2022),(Citation: ESET Carbon Mar 2017),(Citation: SentinelOne Aoqin Dragon June 2022),(Citation: Eset Ramsay May 2020),(Citation: TrendMicro Patchwork Dec 2017),(Citation: Accenture MUDCARP March 2019),(Citation: TrendMicro Taidoor),(Citation: Github Koadic),(Citation: CopyKittens Nov 2015),(Citation: TrendMicro Netwalker May 2020),(Citation: Proofpoint TA505 October 2019),(Citation: Trend Micro Banking Malware Jan 2019),(Citation: DHS/CISA Ransomware Targeting Healthcare October 2020),(Citation: F-Secure BlackEnergy 2014),(Citation: Accenture Dragonfish Jan 2018),(Citation: Malwarebytes Saint Bot April 2021),(Citation: Secureworks DarkTortilla Aug 2022),(Citation: Kaspersky TajMahal April 2019),(Citation: BlackBerry CostaRicto November 2020),(Citation: CrowdStrike Putter Panda),(Citation: Github Rapid7 Meterpreter Elevate),(Citation: Cybereason Conti Jan 2021),(Citation: FinFisher Citation),(Citation: AlienVault Sykipot 2011),(Citation: IBM MegaCortex),(Citation: GitHub PowerSploit May 2012),(Citation: Kaspersky ShadowPad Aug 2017),(Citation: Airbus Derusbi 2015),(Citation: Sophos Maze VM September 2020),(Citation: McAfee Lazarus Resurfaces Feb 2018),(Citation: ESET ComRAT May 2020),(Citation: DFIR Conti Bazar Nov 2021),(Citation: Nicolas Falliere, Liam O Murchu, Eric Chien February 2011),(Citation: ESET Sednit Part 3),(Citation: McAfee Maze March 2020),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: PowerSploit Documentation),(Citation: BiZone Lizar May 2021),(Citation: Talos Cobalt Strike September 2020),(Citation: Picus Emotet Dec 2018),(Citation: US-CERT Emotet Jul 2018),(Citation: ESET Carberp March 2012),(Citation: Microsoft FinFisher March 2018),(Citation: Symantec Bumblebee June 2022),(Citation: ESET Turla Mosquito May 2018),(Citation: GitHub Pupy),(Citation: ESET BackdoorDiplomacy Jun 2021),"
T1055.003,Process Injection: Thread Execution Hijacking,"Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. 

Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)

This is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/003,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: Securelist WhiteBear Aug 2017),(Citation: ESET Gazer Aug 2017),(Citation: Trend Micro Waterbear December 2019),(Citation: Secureworks Karagany July 2019),"
T1055.004,Process Injection: Asynchronous Procedure Call,"Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. 

APC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). 

A variation of APC injection, dubbed ""Early Bird injection"", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/004,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: Bitdefender FIN8 July 2021),(Citation: Prevx Carberp March 2011),(Citation: IBM IcedID November 2017),(Citation: ESET Attor Oct 2019),(Citation: Malwarebytes Saint Bot April 2021),(Citation: Proofpoint Bumblebee April 2022),(Citation: ESET InvisiMole June 2020),(Citation: CyberBit Early Bird Apr 2018),(Citation: Trustwave Pillowmint June 2020),"
T1055.005,Process Injection: Thread Local Storage,"Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. 

TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other [Process Injection](https://attack.mitre.org/techniques/T1055) techniques such as [Process Hollowing](https://attack.mitre.org/techniques/T1055/012).(Citation: FireEye TLS Nov 2017)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/005,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: FireEye Ursnif Nov 2017),(Citation: TrendMicro Ursnif Mar 2015),(Citation: TrendMicro PE_URSNIF.A2),"
T1055.008,Process Injection: Ptrace System Calls,"Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. 

Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>) then invoking that memory with <code>PTRACE_SETREGS</code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) 

Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.(Citation: BH Linux Inject) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/008,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.009,Process Injection: Proc Memory,"Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. 

Proc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/[pid]</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within <code>/proc/[pid]/maps</code> can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) 

Other techniques such as [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) may be used to populate a target process with more available gadgets. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/009,14 January 2020,20 June 2020,1.0,"Defense Evasion, Privilege Escalation","File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],File: File Modification,True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.011,Process Injection: Extra Window Memory Injection,"Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. 

Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)

Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.

Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/011,14 January 2020,10 November 2020,1.0,"Defense Evasion, Privilege Escalation",Monitor for API calls related to enumerating and manipulating EWM such as GetWindowLong (Citation: Microsoft GetWindowLong function) and SetWindowLong (Citation: Microsoft SetWindowLong function). Malware associated with this technique have also used SendNotifyMessage (Citation: Microsoft SendNotifyMessage function) to trigger the associated window procedure and eventual malicious injection. (Citation: Elastic Process Injection July 2017),['Windows'],Process: OS API Execution,True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: ESET Recon Snake Nest),(Citation: MalwareTech Power Loader Aug 2013),(Citation: WeLiveSecurity Gapz and Redyms Mar 2013),"
T1055.012,Process Injection: Process Hollowing,"Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  

Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)

This is very similar to [Thread Local Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/012,14 January 2020,29 November 2021,1.2,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

Processing hollowing commonly involves spawning an otherwise benign victim process. Consider correlating detections of processes created in a suspended state (ex: through API flags or process’ thread metadata) with other malicious activity such as attempts to modify a process' memory, especially by its parent process, or other abnormal process behavior.(Citation: Nviso Spoof Command Line 2020)(Citation: Mandiant Endpoint Evading 2019)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: FireEye Ursnif Nov 2017),(Citation: Palo Alto Networks BBSRAT),(Citation: Unit42 Azorult Nov 2018),(Citation: Proofpoint Leviathan Oct 2017),(Citation: Talos Kimsuky Nov 2021),(Citation: Trend Micro Totbrick Oct 2016),(Citation: Trend Micro DRBControl February 2020),(Citation: NCC Group Team9 June 2020),(Citation: Malwarebytes SmokeLoader 2016),(Citation: Cisco Ukraine Wipers January 2022),(Citation: Profero APT27 December 2020),(Citation: Cyberreason Anchor December 2019),(Citation: MalwareBytes WoodyRAT Aug 2022),(Citation: Forcepoint Monsoon),(Citation: RecordedFuture WhisperGate Jan 2022),(Citation: Microsoft Dofoil 2018),(Citation: Symantec W32.Duqu),(Citation: S2 Grupo TrickBot June 2017),(Citation: Cybereason Cobalt Kitty 2017),(Citation: Secureworks BRONZE PRESIDENT December 2019),(Citation: Microsoft Totbrick Oct 2017),(Citation: Red Canary NETWIRE January 2020),(Citation: OilRig New Delivery Oct 2017),(Citation: SentinelLabs Agent Tesla Aug 2020),(Citation: EFF Manul Aug 2016),(Citation: CheckPoint Bandook Nov 2020),(Citation: Talos Lokibot Jan 2021),(Citation: Palo Alto Unit 42 OutSteel SaintBot February 2022 ),(Citation: Securelist Brazilian Banking Malware July 2020),(Citation: Nccgroup Emissary Panda May 2018),(Citation: Securelist LuckyMouse June 2018),(Citation: Securelist Dtrack),(Citation: Cybereason Astaroth Feb 2019),(Citation: Lookout Dark Caracal Jan 2018),(Citation: Infoblox Lokibot January 2019),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: Cymmetria Patchwork),(Citation: Accenture Hogfish April 2018),(Citation: Unit 42 Gorgon Group Aug 2018),(Citation: FireEye NETWIRE March 2019),(Citation: TrendMicro Patchwork Dec 2017),(Citation: Cobalt Strike TTPs Dec 2017),(Citation: ATT QakBot April 2021),(Citation: Cybereason Bazar July 2020),"
T1055.013,Process Injection: Process Doppelgänging,"Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. 

Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)

Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelgänging Dec 2017)

Adversaries may abuse TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055). Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. (Citation: BlackHat Process Doppelgänging Dec 2017)

Process Doppelgänging is implemented in 4 steps (Citation: BlackHat Process Doppelgänging Dec 2017):

* Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.
* Load – Create a shared section of memory and load the malicious executable.
* Rollback – Undo changes to original executable, effectively removing malicious code from the file system.
* Animate – Create a process from the tainted section of memory and initiate execution.

This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/013,14 January 2020,09 February 2021,1.0,"Defense Evasion, Privilege Escalation","Monitor and analyze calls to <code>CreateTransaction</code>, <code>CreateFileTransacted</code>, <code>RollbackTransaction</code>, and other rarely used functions indicative of TxF activity. Process Doppelgänging also invokes an outdated and undocumented implementation of the Windows process loader via calls to <code>NtCreateProcessEx</code> and <code>NtCreateThreadEx</code> as well as API calls used to modify memory within another process, such as <code>WriteProcessMemory</code>. (Citation: BlackHat Process Doppelgänging Dec 2017) (Citation: hasherezade Process Doppelgänging Dec 2017)

Scan file objects reported during the PsSetCreateProcessNotifyRoutine, (Citation: Microsoft PsSetCreateProcessNotifyRoutine routine) which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access. (Citation: BlackHat Process Doppelgänging Dec 2017) Also consider comparing file objects loaded in memory to the corresponding file on disk. (Citation: hasherezade Process Doppelgänging Dec 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",['Windows'],"File: File Metadata, Process: OS API Execution",True,T1055,"['Anti-virus', 'Application control']",,"['Administrator', 'SYSTEM', 'User']",,,,,"(Citation: Kaspersky Lab SynAck May 2018),(Citation: SecureList SynAck Doppelgänging May 2018),(Citation: NCC Group Team9 June 2020),(Citation: Symantec Leafminer July 2018),(Citation: Cybereason Bazar July 2020),"
T1055.014,Process Injection: VDSO Hijacking,"Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. 

VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via [Ptrace System Calls](https://attack.mitre.org/techniques/T1055/008). However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009)(Citation: Backtrace VDSO)(Citation: VDSO Aug 2005)(Citation: Syscall 2014)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",https://attack.mitre.org/techniques/T1055/014,14 January 2020,07 July 2022,1.1,"Defense Evasion, Privilege Escalation","Monitor for malicious usage of system calls, such as ptrace and mmap, that can be used to attach to, manipulate memory, then redirect a processes' execution path. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)(Citation: GNU Acct)(Citation: RHEL auditd)(Citation: Chokepoint preload rootkits) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],"Module: Module Load, Process: OS API Execution",True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.015,Process Injection: ListPlanting,"Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.

List-view controls are user interface windows used to display collections of items.(Citation: Microsoft List View Controls) Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.

ListPlanting (a form of message-passing ""shatter attack"") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.(Citation: Modexp Windows Process Injection) Adversaries must first copy code into the target process’ memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other [Process Injection](https://attack.mitre.org/techniques/T1055) methods.

Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory.(Citation: ESET InvisiMole June 2020) 

Finally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.",https://attack.mitre.org/techniques/T1055/015,22 November 2021,08 March 2022,1.0,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>FindWindow</code>, <code>FindWindowEx</code>, <code>EnumWindows</code>, <code>EnumChildWindows</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be abused for this technique. 

Consider monitoring for excessive use of <code>SendMessage</code> and/or <code>PostMessage</code> API functions with <code>LVM_SETITEMPOSITION</code> and/or <code>LVM_GETITEMPOSITION</code> arguments.

ullalyze process behavior to determine if a process is performing unusual actions, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Modification",True,T1055,,ESET,['User'],,,,,"(Citation: ESET InvisiMole June 2020),"
T1055.003,Process Injection: Thread Execution Hijacking,"Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. 

Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)

This is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/003,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: Securelist WhiteBear Aug 2017),(Citation: ESET Gazer Aug 2017),(Citation: Trend Micro Waterbear December 2019),(Citation: Secureworks Karagany July 2019),"
T1055,Process Injection,"Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. 

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. 

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",https://attack.mitre.org/techniques/T1055,31 May 2017,30 March 2023,1.3,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017) 

Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. 

Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) 

Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.(Citation: Microsoft Sysmon v6 May 2017) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","['Linux', 'Windows', 'macOS']","File: File Metadata, File: File Modification, Module: Module Load, Process: OS API Execution, Process: Process Access, Process: Process Metadata, Process: Process Modification",False,,"['Application control', 'Anti-virus']","Anastasios Pingios; Christiaan Beek, @ChristiaanBeek; Ryan Becwar",,,,,,"(Citation: Cybereason Bumblebee August 2022),(Citation: F-Secure Sofacy 2015),(Citation: Kaspersky QakBot September 2021),(Citation: Group IB Cobalt Aug 2017),(Citation: GitHub SILENTTRINITY Modules July 2019),(Citation: Trend Micro DRBControl February 2020),(Citation: Unit 42 Sofacy Feb 2018),(Citation: Unit42 Emissary Panda May 2019),(Citation: ESET Gazer Aug 2017),(Citation: ESET InvisiMole June 2020),(Citation: Kaspersky StoneDrill 2017),(Citation: MalwareBytes WoodyRAT Aug 2022),(Citation: Microsoft PLATINUM April 2016),(Citation: US-CERT HOPLIGHT Apr 2019),(Citation: Securelist WhiteBear Aug 2017),(Citation: cobaltstrike manual),(Citation: Kroll Qakbot June 2020),(Citation: JPCert BlackTech Malware September 2019),(Citation: ESET Turla PowerShell May 2019),(Citation: Trend Micro Iron Tiger April 2021),(Citation: Trend Micro Qakbot May 2020),(Citation: FoxIT Wocao December 2019),(Citation: Cybereason Cobalt Kitty 2017),(Citation: Medium Eli Salem GuLoader April 2021),(Citation: Fortinet Remcos Feb 2017),(Citation: Malwarebytes Dyreza November 2015),(Citation: Gh0stRAT ATT March 2019),(Citation: Trend Micro Qakbot December 2020),(Citation: Red Canary NETWIRE January 2020),(Citation: Trend Micro Waterbear December 2019),(Citation: GitHub Sliver C2),(Citation: Malwarebytes RokRAT VBA January 2021),(Citation: SentinelLabs Agent Tesla Aug 2020),(Citation: Talos Group123),(Citation: Symantec Dragonfly),(Citation: ESET Attor Oct 2019),(Citation: BlackBerry CostaRicto November 2020),(Citation: Donut Github),(Citation: Trend Micro Black Basta October 2022),(Citation: PaloAlto CardinalRat Apr 2017),(Citation: CISA MAR SLOTHFULMEDIA October 2020),(Citation: SentinelLabs Metador Sept 2022),(Citation: Cylance Dust Storm),(Citation: Check Point Warzone Feb 2020),(Citation: Talos NavRAT May 2018),(Citation: McAfee REvil October 2019),(Citation: TrendMicro Lazarus Nov 2018),(Citation: FireEye APT41 Aug 2019),(Citation: Kaspersky ShadowPad Aug 2017),(Citation: Joe Sec Trickbot),(Citation: NCSC Joint Report Public Tools),(Citation: DFIR Conti Bazar Nov 2021),(Citation: Github PowerShell Empire),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: Symantec Wiarp May 2012),(Citation: BiZone Lizar May 2021),(Citation: GitHub PoshC2),(Citation: CrowdStrike Ryuk January 2019),(Citation: Bishop Fox Sliver Framework August 2019),(Citation: Microsoft SIR Vol 21),(Citation: Gigamon Berserk Bear October 2021),(Citation: Cyble Egregor Oct 2020),(Citation: Talos Smoke Loader July 2018),(Citation: Bitdefender FunnyDream Campaign November 2020),(Citation: Unit 42 IronNetInjector February 2021 ),(Citation: Group IB Silence Sept 2018),(Citation: Cybereason Bazar July 2020),(Citation: Threatpost New Op Sharpshooter Data March 2019),(Citation: Securelist Kimsuky Sept 2013),(Citation: Trend Micro Tick November 2019),(Citation: win10_asr)"
T1055.001,Process Injection: Dynamic-link Library Injection,"Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  

DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) 

Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) 

ullother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/001,14 January 2020,18 October 2022,1.2,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Module: Module Load, Process: OS API Execution, Process: Process Access, Process: Process Metadata, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",Boominathan Sundaram,['User'],,,,,"(Citation: Lotus Blossom Jun 2015),(Citation: Unit 42 IronNetInjector February 2021 ),(Citation: DFIR Ryuk 2 Hour Speed Run November 2020),(Citation: RATANKBA),(Citation: Lazarus APT January 2022),(Citation: Unit 42 Kazuar May 2017),(Citation: CISA MAR-10292089-1.v2 TAIDOOR August 2021),(Citation: Symantec Darkmoon Aug 2005),(Citation: Bitdefender FunnyDream Campaign November 2020),(Citation: Symantec Dyre June 2015),(Citation: FireEye Poison Ivy),(Citation: Lazarus RATANKBA),(Citation: TrendMicro Tropic Trooper Mar 2018),(Citation: ESET PipeMon May 2020),(Citation: Kaspersky ProjectSauron Technical Analysis),(Citation: IBM TA505 April 2020),(Citation: CarbonBlack Conti July 2020),(Citation: Lotus Blossom Dec 2015),(Citation: CISA ComRAT Oct 2020),(Citation: Camba RARSTONE),(Citation: Medium Metamorfo Apr 2020),(Citation: Talos ZxShell Oct 2014),(Citation: Symantec W32.Duqu),(Citation: ESET Gelsemium June 2021),(Citation: TrendMicro Tropic Trooper May 2020),(Citation: CheckPoint Naikon May 2020),(Citation: Proofpoint Bumblebee April 2022),(Citation: ESET Carbon Mar 2017),(Citation: SentinelOne Aoqin Dragon June 2022),(Citation: Eset Ramsay May 2020),(Citation: TrendMicro Patchwork Dec 2017),(Citation: Accenture MUDCARP March 2019),(Citation: TrendMicro Taidoor),(Citation: Github Koadic),(Citation: CopyKittens Nov 2015),(Citation: TrendMicro Netwalker May 2020),(Citation: Proofpoint TA505 October 2019),(Citation: Trend Micro Banking Malware Jan 2019),(Citation: DHS/CISA Ransomware Targeting Healthcare October 2020),(Citation: F-Secure BlackEnergy 2014),(Citation: Accenture Dragonfish Jan 2018),(Citation: Malwarebytes Saint Bot April 2021),(Citation: Secureworks DarkTortilla Aug 2022),(Citation: Kaspersky TajMahal April 2019),(Citation: BlackBerry CostaRicto November 2020),(Citation: CrowdStrike Putter Panda),(Citation: Github Rapid7 Meterpreter Elevate),(Citation: Cybereason Conti Jan 2021),(Citation: FinFisher Citation),(Citation: AlienVault Sykipot 2011),(Citation: IBM MegaCortex),(Citation: GitHub PowerSploit May 2012),(Citation: Kaspersky ShadowPad Aug 2017),(Citation: Airbus Derusbi 2015),(Citation: Sophos Maze VM September 2020),(Citation: McAfee Lazarus Resurfaces Feb 2018),(Citation: ESET ComRAT May 2020),(Citation: DFIR Conti Bazar Nov 2021),(Citation: Nicolas Falliere, Liam O Murchu, Eric Chien February 2011),(Citation: ESET Sednit Part 3),(Citation: McAfee Maze March 2020),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: PowerSploit Documentation),(Citation: BiZone Lizar May 2021),(Citation: Talos Cobalt Strike September 2020),(Citation: Picus Emotet Dec 2018),(Citation: US-CERT Emotet Jul 2018),(Citation: ESET Carberp March 2012),(Citation: Microsoft FinFisher March 2018),(Citation: Symantec Bumblebee June 2022),(Citation: ESET Turla Mosquito May 2018),(Citation: GitHub Pupy),(Citation: ESET BackdoorDiplomacy Jun 2021),"
T1055.002,Process Injection: Portable Executable Injection,"Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. 

PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Elastic Process Injection July 2017) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/002,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: GDATA Zeus Panda June 2017),(Citation: BiZone Lizar May 2021),(Citation: ESET InvisiMole June 2020),(Citation: FireEye CARBANAK June 2017),(Citation: Unit 42 Gorgon Group Aug 2018),(Citation: Talos Rocke August 2018),(Citation: ESET GreyEnergy Oct 2018),"
T1055.004,Process Injection: Asynchronous Procedure Call,"Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. 

APC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). 

A variation of APC injection, dubbed ""Early Bird injection"", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/004,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: Bitdefender FIN8 July 2021),(Citation: Prevx Carberp March 2011),(Citation: IBM IcedID November 2017),(Citation: ESET Attor Oct 2019),(Citation: Malwarebytes Saint Bot April 2021),(Citation: Proofpoint Bumblebee April 2022),(Citation: ESET InvisiMole June 2020),(Citation: CyberBit Early Bird Apr 2018),(Citation: Trustwave Pillowmint June 2020),"
T1055.005,Process Injection: Thread Local Storage,"Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. 

TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other [Process Injection](https://attack.mitre.org/techniques/T1055) techniques such as [Process Hollowing](https://attack.mitre.org/techniques/T1055/012).(Citation: FireEye TLS Nov 2017)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/005,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: FireEye Ursnif Nov 2017),(Citation: TrendMicro Ursnif Mar 2015),(Citation: TrendMicro PE_URSNIF.A2),"
T1055.008,Process Injection: Ptrace System Calls,"Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. 

Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>) then invoking that memory with <code>PTRACE_SETREGS</code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) 

Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.(Citation: BH Linux Inject) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/008,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.009,Process Injection: Proc Memory,"Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. 

Proc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/[pid]</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within <code>/proc/[pid]/maps</code> can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) 

Other techniques such as [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) may be used to populate a target process with more available gadgets. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/009,14 January 2020,20 June 2020,1.0,"Defense Evasion, Privilege Escalation","File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],File: File Modification,True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.011,Process Injection: Extra Window Memory Injection,"Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. 

Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)

Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.

Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/011,14 January 2020,10 November 2020,1.0,"Defense Evasion, Privilege Escalation",Monitor for API calls related to enumerating and manipulating EWM such as GetWindowLong (Citation: Microsoft GetWindowLong function) and SetWindowLong (Citation: Microsoft SetWindowLong function). Malware associated with this technique have also used SendNotifyMessage (Citation: Microsoft SendNotifyMessage function) to trigger the associated window procedure and eventual malicious injection. (Citation: Elastic Process Injection July 2017),['Windows'],Process: OS API Execution,True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: ESET Recon Snake Nest),(Citation: MalwareTech Power Loader Aug 2013),(Citation: WeLiveSecurity Gapz and Redyms Mar 2013),"
T1055.012,Process Injection: Process Hollowing,"Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  

Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)

This is very similar to [Thread Local Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/012,14 January 2020,29 November 2021,1.2,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

Processing hollowing commonly involves spawning an otherwise benign victim process. Consider correlating detections of processes created in a suspended state (ex: through API flags or process’ thread metadata) with other malicious activity such as attempts to modify a process' memory, especially by its parent process, or other abnormal process behavior.(Citation: Nviso Spoof Command Line 2020)(Citation: Mandiant Endpoint Evading 2019)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: FireEye Ursnif Nov 2017),(Citation: Palo Alto Networks BBSRAT),(Citation: Unit42 Azorult Nov 2018),(Citation: Proofpoint Leviathan Oct 2017),(Citation: Talos Kimsuky Nov 2021),(Citation: Trend Micro Totbrick Oct 2016),(Citation: Trend Micro DRBControl February 2020),(Citation: NCC Group Team9 June 2020),(Citation: Malwarebytes SmokeLoader 2016),(Citation: Cisco Ukraine Wipers January 2022),(Citation: Profero APT27 December 2020),(Citation: Cyberreason Anchor December 2019),(Citation: MalwareBytes WoodyRAT Aug 2022),(Citation: Forcepoint Monsoon),(Citation: RecordedFuture WhisperGate Jan 2022),(Citation: Microsoft Dofoil 2018),(Citation: Symantec W32.Duqu),(Citation: S2 Grupo TrickBot June 2017),(Citation: Cybereason Cobalt Kitty 2017),(Citation: Secureworks BRONZE PRESIDENT December 2019),(Citation: Microsoft Totbrick Oct 2017),(Citation: Red Canary NETWIRE January 2020),(Citation: OilRig New Delivery Oct 2017),(Citation: SentinelLabs Agent Tesla Aug 2020),(Citation: EFF Manul Aug 2016),(Citation: CheckPoint Bandook Nov 2020),(Citation: Talos Lokibot Jan 2021),(Citation: Palo Alto Unit 42 OutSteel SaintBot February 2022 ),(Citation: Securelist Brazilian Banking Malware July 2020),(Citation: Nccgroup Emissary Panda May 2018),(Citation: Securelist LuckyMouse June 2018),(Citation: Securelist Dtrack),(Citation: Cybereason Astaroth Feb 2019),(Citation: Lookout Dark Caracal Jan 2018),(Citation: Infoblox Lokibot January 2019),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: Cymmetria Patchwork),(Citation: Accenture Hogfish April 2018),(Citation: Unit 42 Gorgon Group Aug 2018),(Citation: FireEye NETWIRE March 2019),(Citation: TrendMicro Patchwork Dec 2017),(Citation: Cobalt Strike TTPs Dec 2017),(Citation: ATT QakBot April 2021),(Citation: Cybereason Bazar July 2020),"
T1055.013,Process Injection: Process Doppelgänging,"Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. 

Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)

Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelgänging Dec 2017)

Adversaries may abuse TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055). Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. (Citation: BlackHat Process Doppelgänging Dec 2017)

Process Doppelgänging is implemented in 4 steps (Citation: BlackHat Process Doppelgänging Dec 2017):

* Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.
* Load – Create a shared section of memory and load the malicious executable.
* Rollback – Undo changes to original executable, effectively removing malicious code from the file system.
* Animate – Create a process from the tainted section of memory and initiate execution.

This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/013,14 January 2020,09 February 2021,1.0,"Defense Evasion, Privilege Escalation","Monitor and analyze calls to <code>CreateTransaction</code>, <code>CreateFileTransacted</code>, <code>RollbackTransaction</code>, and other rarely used functions indicative of TxF activity. Process Doppelgänging also invokes an outdated and undocumented implementation of the Windows process loader via calls to <code>NtCreateProcessEx</code> and <code>NtCreateThreadEx</code> as well as API calls used to modify memory within another process, such as <code>WriteProcessMemory</code>. (Citation: BlackHat Process Doppelgänging Dec 2017) (Citation: hasherezade Process Doppelgänging Dec 2017)

Scan file objects reported during the PsSetCreateProcessNotifyRoutine, (Citation: Microsoft PsSetCreateProcessNotifyRoutine routine) which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access. (Citation: BlackHat Process Doppelgänging Dec 2017) Also consider comparing file objects loaded in memory to the corresponding file on disk. (Citation: hasherezade Process Doppelgänging Dec 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",['Windows'],"File: File Metadata, Process: OS API Execution",True,T1055,"['Anti-virus', 'Application control']",,"['Administrator', 'SYSTEM', 'User']",,,,,"(Citation: Kaspersky Lab SynAck May 2018),(Citation: SecureList SynAck Doppelgänging May 2018),(Citation: NCC Group Team9 June 2020),(Citation: Symantec Leafminer July 2018),(Citation: Cybereason Bazar July 2020),"
T1055.014,Process Injection: VDSO Hijacking,"Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. 

VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via [Ptrace System Calls](https://attack.mitre.org/techniques/T1055/008). However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009)(Citation: Backtrace VDSO)(Citation: VDSO Aug 2005)(Citation: Syscall 2014)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",https://attack.mitre.org/techniques/T1055/014,14 January 2020,07 July 2022,1.1,"Defense Evasion, Privilege Escalation","Monitor for malicious usage of system calls, such as ptrace and mmap, that can be used to attach to, manipulate memory, then redirect a processes' execution path. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)(Citation: GNU Acct)(Citation: RHEL auditd)(Citation: Chokepoint preload rootkits) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],"Module: Module Load, Process: OS API Execution",True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.015,Process Injection: ListPlanting,"Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.

List-view controls are user interface windows used to display collections of items.(Citation: Microsoft List View Controls) Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.

ListPlanting (a form of message-passing ""shatter attack"") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.(Citation: Modexp Windows Process Injection) Adversaries must first copy code into the target process’ memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other [Process Injection](https://attack.mitre.org/techniques/T1055) methods.

Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory.(Citation: ESET InvisiMole June 2020) 

Finally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.",https://attack.mitre.org/techniques/T1055/015,22 November 2021,08 March 2022,1.0,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>FindWindow</code>, <code>FindWindowEx</code>, <code>EnumWindows</code>, <code>EnumChildWindows</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be abused for this technique. 

Consider monitoring for excessive use of <code>SendMessage</code> and/or <code>PostMessage</code> API functions with <code>LVM_SETITEMPOSITION</code> and/or <code>LVM_GETITEMPOSITION</code> arguments.

ullalyze process behavior to determine if a process is performing unusual actions, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Modification",True,T1055,,ESET,['User'],,,,,"(Citation: ESET InvisiMole June 2020),"
T1055.012,Process Injection: Process Hollowing,"Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  

Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)

This is very similar to [Thread Local Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/012,14 January 2020,29 November 2021,1.2,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

Processing hollowing commonly involves spawning an otherwise benign victim process. Consider correlating detections of processes created in a suspended state (ex: through API flags or process’ thread metadata) with other malicious activity such as attempts to modify a process' memory, especially by its parent process, or other abnormal process behavior.(Citation: Nviso Spoof Command Line 2020)(Citation: Mandiant Endpoint Evading 2019)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: FireEye Ursnif Nov 2017),(Citation: Palo Alto Networks BBSRAT),(Citation: Unit42 Azorult Nov 2018),(Citation: Proofpoint Leviathan Oct 2017),(Citation: Talos Kimsuky Nov 2021),(Citation: Trend Micro Totbrick Oct 2016),(Citation: Trend Micro DRBControl February 2020),(Citation: NCC Group Team9 June 2020),(Citation: Malwarebytes SmokeLoader 2016),(Citation: Cisco Ukraine Wipers January 2022),(Citation: Profero APT27 December 2020),(Citation: Cyberreason Anchor December 2019),(Citation: MalwareBytes WoodyRAT Aug 2022),(Citation: Forcepoint Monsoon),(Citation: RecordedFuture WhisperGate Jan 2022),(Citation: Microsoft Dofoil 2018),(Citation: Symantec W32.Duqu),(Citation: S2 Grupo TrickBot June 2017),(Citation: Cybereason Cobalt Kitty 2017),(Citation: Secureworks BRONZE PRESIDENT December 2019),(Citation: Microsoft Totbrick Oct 2017),(Citation: Red Canary NETWIRE January 2020),(Citation: OilRig New Delivery Oct 2017),(Citation: SentinelLabs Agent Tesla Aug 2020),(Citation: EFF Manul Aug 2016),(Citation: CheckPoint Bandook Nov 2020),(Citation: Talos Lokibot Jan 2021),(Citation: Palo Alto Unit 42 OutSteel SaintBot February 2022 ),(Citation: Securelist Brazilian Banking Malware July 2020),(Citation: Nccgroup Emissary Panda May 2018),(Citation: Securelist LuckyMouse June 2018),(Citation: Securelist Dtrack),(Citation: Cybereason Astaroth Feb 2019),(Citation: Lookout Dark Caracal Jan 2018),(Citation: Infoblox Lokibot January 2019),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: Cymmetria Patchwork),(Citation: Accenture Hogfish April 2018),(Citation: Unit 42 Gorgon Group Aug 2018),(Citation: FireEye NETWIRE March 2019),(Citation: TrendMicro Patchwork Dec 2017),(Citation: Cobalt Strike TTPs Dec 2017),(Citation: ATT QakBot April 2021),(Citation: Cybereason Bazar July 2020),"
T1055,Process Injection,"Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. 

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. 

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",https://attack.mitre.org/techniques/T1055,31 May 2017,30 March 2023,1.3,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017) 

Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. 

Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) 

Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.(Citation: Microsoft Sysmon v6 May 2017) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","['Linux', 'Windows', 'macOS']","File: File Metadata, File: File Modification, Module: Module Load, Process: OS API Execution, Process: Process Access, Process: Process Metadata, Process: Process Modification",False,,"['Application control', 'Anti-virus']","Anastasios Pingios; Christiaan Beek, @ChristiaanBeek; Ryan Becwar",,,,,,"(Citation: Cybereason Bumblebee August 2022),(Citation: F-Secure Sofacy 2015),(Citation: Kaspersky QakBot September 2021),(Citation: Group IB Cobalt Aug 2017),(Citation: GitHub SILENTTRINITY Modules July 2019),(Citation: Trend Micro DRBControl February 2020),(Citation: Unit 42 Sofacy Feb 2018),(Citation: Unit42 Emissary Panda May 2019),(Citation: ESET Gazer Aug 2017),(Citation: ESET InvisiMole June 2020),(Citation: Kaspersky StoneDrill 2017),(Citation: MalwareBytes WoodyRAT Aug 2022),(Citation: Microsoft PLATINUM April 2016),(Citation: US-CERT HOPLIGHT Apr 2019),(Citation: Securelist WhiteBear Aug 2017),(Citation: cobaltstrike manual),(Citation: Kroll Qakbot June 2020),(Citation: JPCert BlackTech Malware September 2019),(Citation: ESET Turla PowerShell May 2019),(Citation: Trend Micro Iron Tiger April 2021),(Citation: Trend Micro Qakbot May 2020),(Citation: FoxIT Wocao December 2019),(Citation: Cybereason Cobalt Kitty 2017),(Citation: Medium Eli Salem GuLoader April 2021),(Citation: Fortinet Remcos Feb 2017),(Citation: Malwarebytes Dyreza November 2015),(Citation: Gh0stRAT ATT March 2019),(Citation: Trend Micro Qakbot December 2020),(Citation: Red Canary NETWIRE January 2020),(Citation: Trend Micro Waterbear December 2019),(Citation: GitHub Sliver C2),(Citation: Malwarebytes RokRAT VBA January 2021),(Citation: SentinelLabs Agent Tesla Aug 2020),(Citation: Talos Group123),(Citation: Symantec Dragonfly),(Citation: ESET Attor Oct 2019),(Citation: BlackBerry CostaRicto November 2020),(Citation: Donut Github),(Citation: Trend Micro Black Basta October 2022),(Citation: PaloAlto CardinalRat Apr 2017),(Citation: CISA MAR SLOTHFULMEDIA October 2020),(Citation: SentinelLabs Metador Sept 2022),(Citation: Cylance Dust Storm),(Citation: Check Point Warzone Feb 2020),(Citation: Talos NavRAT May 2018),(Citation: McAfee REvil October 2019),(Citation: TrendMicro Lazarus Nov 2018),(Citation: FireEye APT41 Aug 2019),(Citation: Kaspersky ShadowPad Aug 2017),(Citation: Joe Sec Trickbot),(Citation: NCSC Joint Report Public Tools),(Citation: DFIR Conti Bazar Nov 2021),(Citation: Github PowerShell Empire),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: Symantec Wiarp May 2012),(Citation: BiZone Lizar May 2021),(Citation: GitHub PoshC2),(Citation: CrowdStrike Ryuk January 2019),(Citation: Bishop Fox Sliver Framework August 2019),(Citation: Microsoft SIR Vol 21),(Citation: Gigamon Berserk Bear October 2021),(Citation: Cyble Egregor Oct 2020),(Citation: Talos Smoke Loader July 2018),(Citation: Bitdefender FunnyDream Campaign November 2020),(Citation: Unit 42 IronNetInjector February 2021 ),(Citation: Group IB Silence Sept 2018),(Citation: Cybereason Bazar July 2020),(Citation: Threatpost New Op Sharpshooter Data March 2019),(Citation: Securelist Kimsuky Sept 2013),(Citation: Trend Micro Tick November 2019),(Citation: win10_asr)"
T1055.001,Process Injection: Dynamic-link Library Injection,"Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  

DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) 

Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) 

ullother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/001,14 January 2020,18 October 2022,1.2,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Module: Module Load, Process: OS API Execution, Process: Process Access, Process: Process Metadata, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",Boominathan Sundaram,['User'],,,,,"(Citation: Lotus Blossom Jun 2015),(Citation: Unit 42 IronNetInjector February 2021 ),(Citation: DFIR Ryuk 2 Hour Speed Run November 2020),(Citation: RATANKBA),(Citation: Lazarus APT January 2022),(Citation: Unit 42 Kazuar May 2017),(Citation: CISA MAR-10292089-1.v2 TAIDOOR August 2021),(Citation: Symantec Darkmoon Aug 2005),(Citation: Bitdefender FunnyDream Campaign November 2020),(Citation: Symantec Dyre June 2015),(Citation: FireEye Poison Ivy),(Citation: Lazarus RATANKBA),(Citation: TrendMicro Tropic Trooper Mar 2018),(Citation: ESET PipeMon May 2020),(Citation: Kaspersky ProjectSauron Technical Analysis),(Citation: IBM TA505 April 2020),(Citation: CarbonBlack Conti July 2020),(Citation: Lotus Blossom Dec 2015),(Citation: CISA ComRAT Oct 2020),(Citation: Camba RARSTONE),(Citation: Medium Metamorfo Apr 2020),(Citation: Talos ZxShell Oct 2014),(Citation: Symantec W32.Duqu),(Citation: ESET Gelsemium June 2021),(Citation: TrendMicro Tropic Trooper May 2020),(Citation: CheckPoint Naikon May 2020),(Citation: Proofpoint Bumblebee April 2022),(Citation: ESET Carbon Mar 2017),(Citation: SentinelOne Aoqin Dragon June 2022),(Citation: Eset Ramsay May 2020),(Citation: TrendMicro Patchwork Dec 2017),(Citation: Accenture MUDCARP March 2019),(Citation: TrendMicro Taidoor),(Citation: Github Koadic),(Citation: CopyKittens Nov 2015),(Citation: TrendMicro Netwalker May 2020),(Citation: Proofpoint TA505 October 2019),(Citation: Trend Micro Banking Malware Jan 2019),(Citation: DHS/CISA Ransomware Targeting Healthcare October 2020),(Citation: F-Secure BlackEnergy 2014),(Citation: Accenture Dragonfish Jan 2018),(Citation: Malwarebytes Saint Bot April 2021),(Citation: Secureworks DarkTortilla Aug 2022),(Citation: Kaspersky TajMahal April 2019),(Citation: BlackBerry CostaRicto November 2020),(Citation: CrowdStrike Putter Panda),(Citation: Github Rapid7 Meterpreter Elevate),(Citation: Cybereason Conti Jan 2021),(Citation: FinFisher Citation),(Citation: AlienVault Sykipot 2011),(Citation: IBM MegaCortex),(Citation: GitHub PowerSploit May 2012),(Citation: Kaspersky ShadowPad Aug 2017),(Citation: Airbus Derusbi 2015),(Citation: Sophos Maze VM September 2020),(Citation: McAfee Lazarus Resurfaces Feb 2018),(Citation: ESET ComRAT May 2020),(Citation: DFIR Conti Bazar Nov 2021),(Citation: Nicolas Falliere, Liam O Murchu, Eric Chien February 2011),(Citation: ESET Sednit Part 3),(Citation: McAfee Maze March 2020),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: PowerSploit Documentation),(Citation: BiZone Lizar May 2021),(Citation: Talos Cobalt Strike September 2020),(Citation: Picus Emotet Dec 2018),(Citation: US-CERT Emotet Jul 2018),(Citation: ESET Carberp March 2012),(Citation: Microsoft FinFisher March 2018),(Citation: Symantec Bumblebee June 2022),(Citation: ESET Turla Mosquito May 2018),(Citation: GitHub Pupy),(Citation: ESET BackdoorDiplomacy Jun 2021),"
T1055.002,Process Injection: Portable Executable Injection,"Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. 

PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Elastic Process Injection July 2017) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/002,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: GDATA Zeus Panda June 2017),(Citation: BiZone Lizar May 2021),(Citation: ESET InvisiMole June 2020),(Citation: FireEye CARBANAK June 2017),(Citation: Unit 42 Gorgon Group Aug 2018),(Citation: Talos Rocke August 2018),(Citation: ESET GreyEnergy Oct 2018),"
T1055.003,Process Injection: Thread Execution Hijacking,"Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. 

Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)

This is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/003,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: Securelist WhiteBear Aug 2017),(Citation: ESET Gazer Aug 2017),(Citation: Trend Micro Waterbear December 2019),(Citation: Secureworks Karagany July 2019),"
T1055.004,Process Injection: Asynchronous Procedure Call,"Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. 

APC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). 

A variation of APC injection, dubbed ""Early Bird injection"", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/004,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: Bitdefender FIN8 July 2021),(Citation: Prevx Carberp March 2011),(Citation: IBM IcedID November 2017),(Citation: ESET Attor Oct 2019),(Citation: Malwarebytes Saint Bot April 2021),(Citation: Proofpoint Bumblebee April 2022),(Citation: ESET InvisiMole June 2020),(Citation: CyberBit Early Bird Apr 2018),(Citation: Trustwave Pillowmint June 2020),"
T1055.005,Process Injection: Thread Local Storage,"Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. 

TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other [Process Injection](https://attack.mitre.org/techniques/T1055) techniques such as [Process Hollowing](https://attack.mitre.org/techniques/T1055/012).(Citation: FireEye TLS Nov 2017)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/005,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: FireEye Ursnif Nov 2017),(Citation: TrendMicro Ursnif Mar 2015),(Citation: TrendMicro PE_URSNIF.A2),"
T1055.008,Process Injection: Ptrace System Calls,"Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. 

Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>) then invoking that memory with <code>PTRACE_SETREGS</code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) 

Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.(Citation: BH Linux Inject) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/008,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.009,Process Injection: Proc Memory,"Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. 

Proc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/[pid]</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within <code>/proc/[pid]/maps</code> can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) 

Other techniques such as [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) may be used to populate a target process with more available gadgets. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/009,14 January 2020,20 June 2020,1.0,"Defense Evasion, Privilege Escalation","File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],File: File Modification,True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.011,Process Injection: Extra Window Memory Injection,"Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. 

Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)

Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.

Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/011,14 January 2020,10 November 2020,1.0,"Defense Evasion, Privilege Escalation",Monitor for API calls related to enumerating and manipulating EWM such as GetWindowLong (Citation: Microsoft GetWindowLong function) and SetWindowLong (Citation: Microsoft SetWindowLong function). Malware associated with this technique have also used SendNotifyMessage (Citation: Microsoft SendNotifyMessage function) to trigger the associated window procedure and eventual malicious injection. (Citation: Elastic Process Injection July 2017),['Windows'],Process: OS API Execution,True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: ESET Recon Snake Nest),(Citation: MalwareTech Power Loader Aug 2013),(Citation: WeLiveSecurity Gapz and Redyms Mar 2013),"
T1055.013,Process Injection: Process Doppelgänging,"Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. 

Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)

Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelgänging Dec 2017)

Adversaries may abuse TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055). Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. (Citation: BlackHat Process Doppelgänging Dec 2017)

Process Doppelgänging is implemented in 4 steps (Citation: BlackHat Process Doppelgänging Dec 2017):

* Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.
* Load – Create a shared section of memory and load the malicious executable.
* Rollback – Undo changes to original executable, effectively removing malicious code from the file system.
* Animate – Create a process from the tainted section of memory and initiate execution.

This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/013,14 January 2020,09 February 2021,1.0,"Defense Evasion, Privilege Escalation","Monitor and analyze calls to <code>CreateTransaction</code>, <code>CreateFileTransacted</code>, <code>RollbackTransaction</code>, and other rarely used functions indicative of TxF activity. Process Doppelgänging also invokes an outdated and undocumented implementation of the Windows process loader via calls to <code>NtCreateProcessEx</code> and <code>NtCreateThreadEx</code> as well as API calls used to modify memory within another process, such as <code>WriteProcessMemory</code>. (Citation: BlackHat Process Doppelgänging Dec 2017) (Citation: hasherezade Process Doppelgänging Dec 2017)

Scan file objects reported during the PsSetCreateProcessNotifyRoutine, (Citation: Microsoft PsSetCreateProcessNotifyRoutine routine) which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access. (Citation: BlackHat Process Doppelgänging Dec 2017) Also consider comparing file objects loaded in memory to the corresponding file on disk. (Citation: hasherezade Process Doppelgänging Dec 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",['Windows'],"File: File Metadata, Process: OS API Execution",True,T1055,"['Anti-virus', 'Application control']",,"['Administrator', 'SYSTEM', 'User']",,,,,"(Citation: Kaspersky Lab SynAck May 2018),(Citation: SecureList SynAck Doppelgänging May 2018),(Citation: NCC Group Team9 June 2020),(Citation: Symantec Leafminer July 2018),(Citation: Cybereason Bazar July 2020),"
T1055.014,Process Injection: VDSO Hijacking,"Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. 

VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via [Ptrace System Calls](https://attack.mitre.org/techniques/T1055/008). However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009)(Citation: Backtrace VDSO)(Citation: VDSO Aug 2005)(Citation: Syscall 2014)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",https://attack.mitre.org/techniques/T1055/014,14 January 2020,07 July 2022,1.1,"Defense Evasion, Privilege Escalation","Monitor for malicious usage of system calls, such as ptrace and mmap, that can be used to attach to, manipulate memory, then redirect a processes' execution path. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)(Citation: GNU Acct)(Citation: RHEL auditd)(Citation: Chokepoint preload rootkits) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],"Module: Module Load, Process: OS API Execution",True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.015,Process Injection: ListPlanting,"Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.

List-view controls are user interface windows used to display collections of items.(Citation: Microsoft List View Controls) Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.

ListPlanting (a form of message-passing ""shatter attack"") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.(Citation: Modexp Windows Process Injection) Adversaries must first copy code into the target process’ memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other [Process Injection](https://attack.mitre.org/techniques/T1055) methods.

Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory.(Citation: ESET InvisiMole June 2020) 

Finally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.",https://attack.mitre.org/techniques/T1055/015,22 November 2021,08 March 2022,1.0,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>FindWindow</code>, <code>FindWindowEx</code>, <code>EnumWindows</code>, <code>EnumChildWindows</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be abused for this technique. 

Consider monitoring for excessive use of <code>SendMessage</code> and/or <code>PostMessage</code> API functions with <code>LVM_SETITEMPOSITION</code> and/or <code>LVM_GETITEMPOSITION</code> arguments.

ullalyze process behavior to determine if a process is performing unusual actions, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Modification",True,T1055,,ESET,['User'],,,,,"(Citation: ESET InvisiMole June 2020),"
T1055.013,Process Injection: Process Doppelgänging,"Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. 

Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)

Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelgänging Dec 2017)

Adversaries may abuse TxF to a perform a file-less variation of [Process Injection](https://attack.mitre.org/techniques/T1055). Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection</code>, <code>VirtualProtectEx</code>, and <code>SetThreadContext</code>. (Citation: BlackHat Process Doppelgänging Dec 2017)

Process Doppelgänging is implemented in 4 steps (Citation: BlackHat Process Doppelgänging Dec 2017):

* Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.
* Load – Create a shared section of memory and load the malicious executable.
* Rollback – Undo changes to original executable, effectively removing malicious code from the file system.
* Animate – Create a process from the tainted section of memory and initiate execution.

This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/013,14 January 2020,09 February 2021,1.0,"Defense Evasion, Privilege Escalation","Monitor and analyze calls to <code>CreateTransaction</code>, <code>CreateFileTransacted</code>, <code>RollbackTransaction</code>, and other rarely used functions indicative of TxF activity. Process Doppelgänging also invokes an outdated and undocumented implementation of the Windows process loader via calls to <code>NtCreateProcessEx</code> and <code>NtCreateThreadEx</code> as well as API calls used to modify memory within another process, such as <code>WriteProcessMemory</code>. (Citation: BlackHat Process Doppelgänging Dec 2017) (Citation: hasherezade Process Doppelgänging Dec 2017)

Scan file objects reported during the PsSetCreateProcessNotifyRoutine, (Citation: Microsoft PsSetCreateProcessNotifyRoutine routine) which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access. (Citation: BlackHat Process Doppelgänging Dec 2017) Also consider comparing file objects loaded in memory to the corresponding file on disk. (Citation: hasherezade Process Doppelgänging Dec 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",['Windows'],"File: File Metadata, Process: OS API Execution",True,T1055,"['Anti-virus', 'Application control']",,"['Administrator', 'SYSTEM', 'User']",,,,,"(Citation: Kaspersky Lab SynAck May 2018),(Citation: SecureList SynAck Doppelgänging May 2018),(Citation: NCC Group Team9 June 2020),(Citation: Symantec Leafminer July 2018),(Citation: Cybereason Bazar July 2020),"
T1055,Process Injection,"Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. 

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. 

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",https://attack.mitre.org/techniques/T1055,31 May 2017,30 March 2023,1.3,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017) 

Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. 

Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) 

Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.(Citation: Microsoft Sysmon v6 May 2017) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","['Linux', 'Windows', 'macOS']","File: File Metadata, File: File Modification, Module: Module Load, Process: OS API Execution, Process: Process Access, Process: Process Metadata, Process: Process Modification",False,,"['Application control', 'Anti-virus']","Anastasios Pingios; Christiaan Beek, @ChristiaanBeek; Ryan Becwar",,,,,,"(Citation: Cybereason Bumblebee August 2022),(Citation: F-Secure Sofacy 2015),(Citation: Kaspersky QakBot September 2021),(Citation: Group IB Cobalt Aug 2017),(Citation: GitHub SILENTTRINITY Modules July 2019),(Citation: Trend Micro DRBControl February 2020),(Citation: Unit 42 Sofacy Feb 2018),(Citation: Unit42 Emissary Panda May 2019),(Citation: ESET Gazer Aug 2017),(Citation: ESET InvisiMole June 2020),(Citation: Kaspersky StoneDrill 2017),(Citation: MalwareBytes WoodyRAT Aug 2022),(Citation: Microsoft PLATINUM April 2016),(Citation: US-CERT HOPLIGHT Apr 2019),(Citation: Securelist WhiteBear Aug 2017),(Citation: cobaltstrike manual),(Citation: Kroll Qakbot June 2020),(Citation: JPCert BlackTech Malware September 2019),(Citation: ESET Turla PowerShell May 2019),(Citation: Trend Micro Iron Tiger April 2021),(Citation: Trend Micro Qakbot May 2020),(Citation: FoxIT Wocao December 2019),(Citation: Cybereason Cobalt Kitty 2017),(Citation: Medium Eli Salem GuLoader April 2021),(Citation: Fortinet Remcos Feb 2017),(Citation: Malwarebytes Dyreza November 2015),(Citation: Gh0stRAT ATT March 2019),(Citation: Trend Micro Qakbot December 2020),(Citation: Red Canary NETWIRE January 2020),(Citation: Trend Micro Waterbear December 2019),(Citation: GitHub Sliver C2),(Citation: Malwarebytes RokRAT VBA January 2021),(Citation: SentinelLabs Agent Tesla Aug 2020),(Citation: Talos Group123),(Citation: Symantec Dragonfly),(Citation: ESET Attor Oct 2019),(Citation: BlackBerry CostaRicto November 2020),(Citation: Donut Github),(Citation: Trend Micro Black Basta October 2022),(Citation: PaloAlto CardinalRat Apr 2017),(Citation: CISA MAR SLOTHFULMEDIA October 2020),(Citation: SentinelLabs Metador Sept 2022),(Citation: Cylance Dust Storm),(Citation: Check Point Warzone Feb 2020),(Citation: Talos NavRAT May 2018),(Citation: McAfee REvil October 2019),(Citation: TrendMicro Lazarus Nov 2018),(Citation: FireEye APT41 Aug 2019),(Citation: Kaspersky ShadowPad Aug 2017),(Citation: Joe Sec Trickbot),(Citation: NCSC Joint Report Public Tools),(Citation: DFIR Conti Bazar Nov 2021),(Citation: Github PowerShell Empire),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: Symantec Wiarp May 2012),(Citation: BiZone Lizar May 2021),(Citation: GitHub PoshC2),(Citation: CrowdStrike Ryuk January 2019),(Citation: Bishop Fox Sliver Framework August 2019),(Citation: Microsoft SIR Vol 21),(Citation: Gigamon Berserk Bear October 2021),(Citation: Cyble Egregor Oct 2020),(Citation: Talos Smoke Loader July 2018),(Citation: Bitdefender FunnyDream Campaign November 2020),(Citation: Unit 42 IronNetInjector February 2021 ),(Citation: Group IB Silence Sept 2018),(Citation: Cybereason Bazar July 2020),(Citation: Threatpost New Op Sharpshooter Data March 2019),(Citation: Securelist Kimsuky Sept 2013),(Citation: Trend Micro Tick November 2019),(Citation: win10_asr)"
T1055.001,Process Injection: Dynamic-link Library Injection,"Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  

DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) 

Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) 

ullother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/001,14 January 2020,18 October 2022,1.2,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Module: Module Load, Process: OS API Execution, Process: Process Access, Process: Process Metadata, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",Boominathan Sundaram,['User'],,,,,"(Citation: Lotus Blossom Jun 2015),(Citation: Unit 42 IronNetInjector February 2021 ),(Citation: DFIR Ryuk 2 Hour Speed Run November 2020),(Citation: RATANKBA),(Citation: Lazarus APT January 2022),(Citation: Unit 42 Kazuar May 2017),(Citation: CISA MAR-10292089-1.v2 TAIDOOR August 2021),(Citation: Symantec Darkmoon Aug 2005),(Citation: Bitdefender FunnyDream Campaign November 2020),(Citation: Symantec Dyre June 2015),(Citation: FireEye Poison Ivy),(Citation: Lazarus RATANKBA),(Citation: TrendMicro Tropic Trooper Mar 2018),(Citation: ESET PipeMon May 2020),(Citation: Kaspersky ProjectSauron Technical Analysis),(Citation: IBM TA505 April 2020),(Citation: CarbonBlack Conti July 2020),(Citation: Lotus Blossom Dec 2015),(Citation: CISA ComRAT Oct 2020),(Citation: Camba RARSTONE),(Citation: Medium Metamorfo Apr 2020),(Citation: Talos ZxShell Oct 2014),(Citation: Symantec W32.Duqu),(Citation: ESET Gelsemium June 2021),(Citation: TrendMicro Tropic Trooper May 2020),(Citation: CheckPoint Naikon May 2020),(Citation: Proofpoint Bumblebee April 2022),(Citation: ESET Carbon Mar 2017),(Citation: SentinelOne Aoqin Dragon June 2022),(Citation: Eset Ramsay May 2020),(Citation: TrendMicro Patchwork Dec 2017),(Citation: Accenture MUDCARP March 2019),(Citation: TrendMicro Taidoor),(Citation: Github Koadic),(Citation: CopyKittens Nov 2015),(Citation: TrendMicro Netwalker May 2020),(Citation: Proofpoint TA505 October 2019),(Citation: Trend Micro Banking Malware Jan 2019),(Citation: DHS/CISA Ransomware Targeting Healthcare October 2020),(Citation: F-Secure BlackEnergy 2014),(Citation: Accenture Dragonfish Jan 2018),(Citation: Malwarebytes Saint Bot April 2021),(Citation: Secureworks DarkTortilla Aug 2022),(Citation: Kaspersky TajMahal April 2019),(Citation: BlackBerry CostaRicto November 2020),(Citation: CrowdStrike Putter Panda),(Citation: Github Rapid7 Meterpreter Elevate),(Citation: Cybereason Conti Jan 2021),(Citation: FinFisher Citation),(Citation: AlienVault Sykipot 2011),(Citation: IBM MegaCortex),(Citation: GitHub PowerSploit May 2012),(Citation: Kaspersky ShadowPad Aug 2017),(Citation: Airbus Derusbi 2015),(Citation: Sophos Maze VM September 2020),(Citation: McAfee Lazarus Resurfaces Feb 2018),(Citation: ESET ComRAT May 2020),(Citation: DFIR Conti Bazar Nov 2021),(Citation: Nicolas Falliere, Liam O Murchu, Eric Chien February 2011),(Citation: ESET Sednit Part 3),(Citation: McAfee Maze March 2020),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: PowerSploit Documentation),(Citation: BiZone Lizar May 2021),(Citation: Talos Cobalt Strike September 2020),(Citation: Picus Emotet Dec 2018),(Citation: US-CERT Emotet Jul 2018),(Citation: ESET Carberp March 2012),(Citation: Microsoft FinFisher March 2018),(Citation: Symantec Bumblebee June 2022),(Citation: ESET Turla Mosquito May 2018),(Citation: GitHub Pupy),(Citation: ESET BackdoorDiplomacy Jun 2021),"
T1055.002,Process Injection: Portable Executable Injection,"Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. 

PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Elastic Process Injection July 2017) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/002,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: GDATA Zeus Panda June 2017),(Citation: BiZone Lizar May 2021),(Citation: ESET InvisiMole June 2020),(Citation: FireEye CARBANAK June 2017),(Citation: Unit 42 Gorgon Group Aug 2018),(Citation: Talos Rocke August 2018),(Citation: ESET GreyEnergy Oct 2018),"
T1055.003,Process Injection: Thread Execution Hijacking,"Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. 

Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)

This is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/003,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: Securelist WhiteBear Aug 2017),(Citation: ESET Gazer Aug 2017),(Citation: Trend Micro Waterbear December 2019),(Citation: Secureworks Karagany July 2019),"
T1055.004,Process Injection: Asynchronous Procedure Call,"Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. 

APC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point <code>QueueUserAPC</code> can be used to invoke a function (such as <code>LoadLibrayA</code> pointing to a malicious DLL). 

A variation of APC injection, dubbed ""Early Bird injection"", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/004,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: Bitdefender FIN8 July 2021),(Citation: Prevx Carberp March 2011),(Citation: IBM IcedID November 2017),(Citation: ESET Attor Oct 2019),(Citation: Malwarebytes Saint Bot April 2021),(Citation: Proofpoint Bumblebee April 2022),(Citation: ESET InvisiMole June 2020),(Citation: CyberBit Early Bird Apr 2018),(Citation: Trustwave Pillowmint June 2020),"
T1055.005,Process Injection: Thread Local Storage,"Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. 

TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other [Process Injection](https://attack.mitre.org/techniques/T1055) techniques such as [Process Hollowing](https://attack.mitre.org/techniques/T1055/012).(Citation: FireEye TLS Nov 2017)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/005,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: FireEye Ursnif Nov 2017),(Citation: TrendMicro Ursnif Mar 2015),(Citation: TrendMicro PE_URSNIF.A2),"
T1055.008,Process Injection: Ptrace System Calls,"Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. 

Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>) then invoking that memory with <code>PTRACE_SETREGS</code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) 

Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.(Citation: BH Linux Inject) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/008,14 January 2020,18 October 2021,1.1,"Defense Evasion, Privilege Escalation","Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.009,Process Injection: Proc Memory,"Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. 

Proc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/[pid]</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within <code>/proc/[pid]/maps</code> can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) 

Other techniques such as [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) may be used to populate a target process with more available gadgets. Similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012), proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) 

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/009,14 January 2020,20 June 2020,1.0,"Defense Evasion, Privilege Escalation","File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],File: File Modification,True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.011,Process Injection: Extra Window Memory Injection,"Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. 

Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)

Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.

Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code>.(Citation: Elastic Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/011,14 January 2020,10 November 2020,1.0,"Defense Evasion, Privilege Escalation",Monitor for API calls related to enumerating and manipulating EWM such as GetWindowLong (Citation: Microsoft GetWindowLong function) and SetWindowLong (Citation: Microsoft SetWindowLong function). Malware associated with this technique have also used SendNotifyMessage (Citation: Microsoft SendNotifyMessage function) to trigger the associated window procedure and eventual malicious injection. (Citation: Elastic Process Injection July 2017),['Windows'],Process: OS API Execution,True,T1055,"['Anti-virus', 'Application control']",,,,,,,"(Citation: ESET Recon Snake Nest),(Citation: MalwareTech Power Loader Aug 2013),(Citation: WeLiveSecurity Gapz and Redyms Mar 2013),"
T1055.012,Process Injection: Process Hollowing,"Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  

Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)

This is very similar to [Thread Local Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. ",https://attack.mitre.org/techniques/T1055/012,14 January 2020,29 November 2021,1.2,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)

Processing hollowing commonly involves spawning an otherwise benign victim process. Consider correlating detections of processes created in a suspended state (ex: through API flags or process’ thread metadata) with other malicious activity such as attempts to modify a process' memory, especially by its parent process, or other abnormal process behavior.(Citation: Nviso Spoof Command Line 2020)(Citation: Mandiant Endpoint Evading 2019)

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",['Windows'],"Process: OS API Execution, Process: Process Access, Process: Process Modification",True,T1055,"['Anti-virus', 'Application control']",,['User'],,,,,"(Citation: FireEye Ursnif Nov 2017),(Citation: Palo Alto Networks BBSRAT),(Citation: Unit42 Azorult Nov 2018),(Citation: Proofpoint Leviathan Oct 2017),(Citation: Talos Kimsuky Nov 2021),(Citation: Trend Micro Totbrick Oct 2016),(Citation: Trend Micro DRBControl February 2020),(Citation: NCC Group Team9 June 2020),(Citation: Malwarebytes SmokeLoader 2016),(Citation: Cisco Ukraine Wipers January 2022),(Citation: Profero APT27 December 2020),(Citation: Cyberreason Anchor December 2019),(Citation: MalwareBytes WoodyRAT Aug 2022),(Citation: Forcepoint Monsoon),(Citation: RecordedFuture WhisperGate Jan 2022),(Citation: Microsoft Dofoil 2018),(Citation: Symantec W32.Duqu),(Citation: S2 Grupo TrickBot June 2017),(Citation: Cybereason Cobalt Kitty 2017),(Citation: Secureworks BRONZE PRESIDENT December 2019),(Citation: Microsoft Totbrick Oct 2017),(Citation: Red Canary NETWIRE January 2020),(Citation: OilRig New Delivery Oct 2017),(Citation: SentinelLabs Agent Tesla Aug 2020),(Citation: EFF Manul Aug 2016),(Citation: CheckPoint Bandook Nov 2020),(Citation: Talos Lokibot Jan 2021),(Citation: Palo Alto Unit 42 OutSteel SaintBot February 2022 ),(Citation: Securelist Brazilian Banking Malware July 2020),(Citation: Nccgroup Emissary Panda May 2018),(Citation: Securelist LuckyMouse June 2018),(Citation: Securelist Dtrack),(Citation: Cybereason Astaroth Feb 2019),(Citation: Lookout Dark Caracal Jan 2018),(Citation: Infoblox Lokibot January 2019),(Citation: Cobalt Strike Manual 4.3 November 2020),(Citation: Cymmetria Patchwork),(Citation: Accenture Hogfish April 2018),(Citation: Unit 42 Gorgon Group Aug 2018),(Citation: FireEye NETWIRE March 2019),(Citation: TrendMicro Patchwork Dec 2017),(Citation: Cobalt Strike TTPs Dec 2017),(Citation: ATT QakBot April 2021),(Citation: Cybereason Bazar July 2020),"
T1055.014,Process Injection: VDSO Hijacking,"Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. 

VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via [Ptrace System Calls](https://attack.mitre.org/techniques/T1055/008). However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009)(Citation: Backtrace VDSO)(Citation: VDSO Aug 2005)(Citation: Syscall 2014)

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",https://attack.mitre.org/techniques/T1055/014,14 January 2020,07 July 2022,1.1,"Defense Evasion, Privilege Escalation","Monitor for malicious usage of system calls, such as ptrace and mmap, that can be used to attach to, manipulate memory, then redirect a processes' execution path. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)(Citation: GNU Acct)(Citation: RHEL auditd)(Citation: Chokepoint preload rootkits) 

ullalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Linux'],"Module: Module Load, Process: OS API Execution",True,T1055,"['Anti-virus', 'Application control']",,,,,,,","
T1055.015,Process Injection: ListPlanting,"Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.

List-view controls are user interface windows used to display collections of items.(Citation: Microsoft List View Controls) Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control.

ListPlanting (a form of message-passing ""shatter attack"") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items.(Citation: Modexp Windows Process Injection) Adversaries must first copy code into the target process’ memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other [Process Injection](https://attack.mitre.org/techniques/T1055) methods.

Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory.(Citation: ESET InvisiMole June 2020) 

Finally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.",https://attack.mitre.org/techniques/T1055/015,22 November 2021,08 March 2022,1.0,"Defense Evasion, Privilege Escalation","Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>FindWindow</code>, <code>FindWindowEx</code>, <code>EnumWindows</code>, <code>EnumChildWindows</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be abused for this technique. 

Consider monitoring for excessive use of <code>SendMessage</code> and/or <code>PostMessage</code> API functions with <code>LVM_SETITEMPOSITION</code> and/or <code>LVM_GETITEMPOSITION</code> arguments.

ullalyze process behavior to determine if a process is performing unusual actions, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",['Windows'],"Process: OS API Execution, Process: Process Modification",True,T1055,,ESET,['User'],,,,,"(Citation: ESET InvisiMole June 2020),"
T1574.011,Hijack Execution Flow: Services Registry Permissions Weakness,"Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under <code>HKLM\SYSTEM\CurrentControlSet\Services</code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  [PowerShell](https://attack.mitre.org/techniques/T1059/001), or [Reg](https://attack.mitre.org/software/S0075). Access to Registry keys is controlled through access control lists and user permissions. (Citation: Registry Key Security)(Citation: malware_hides_service)

If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).

Adversaries may also alter other Registry keys in the service’s Registry tree. For example, the <code>FailureCommand</code> key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)

The <code>Performance</code> key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.(Citation: microsoft_services_registry_tree) If the <code>Performance</code> key is not already present and if an adversary-controlled user has the <code>Create Subkey</code> permission, adversaries may create the <code>Performance</code> key in the service’s Registry tree to point to a malicious DLL.(Citation: insecure_reg_perms)

Adversaries may also add the <code>Parameters</code> key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.(Citation: microsoft_services_registry_tree)(Citation: troj_zegost) Additionally, If adversaries launch their malicious services using svchost.exe, the service’s file may be identified using <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\servicename\Parameters\ServiceDll</code>.(Citation: malware_hides_service)",https://attack.mitre.org/techniques/T1574/011,13 March 2020,30 March 2023,1.1,"Defense Evasion, Persistence, Privilege Escalation","Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.

Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information. (Citation: Autoruns for Windows) Look for changes to services that do not correlate with known software, patch cycles, etc. Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.

Monitor processes and command-line arguments for actions that could be done to modify services. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Services may also be changed through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001), so additional logging may need to be configured to gather the appropriate data.",['Windows'],"Command: Command Execution, Process: Process Creation, Service: Service Modification, Windows Registry: Windows Registry Key Modification",True,T1574,['Application Control'],"Matthew Demaske, Adaptforward; Travis Smith, Tripwire","['Administrator', 'User']",,,,SYSTEM,"(Citation: McAfee Honeybee),"
T1574,Hijack Execution Flow,"Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.

There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",https://attack.mitre.org/techniques/T1574,12 March 2020,05 May 2022,1.2,"Defense Evasion, Persistence, Privilege Escalation","Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.

Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.

Monitor for changes to environment variables, as well as the commands to implement these changes.

Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.

Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.

Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information. (Citation: Autoruns for Windows) Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.","['Linux', 'Windows', 'macOS']","Command: Command Execution, File: File Creation, File: File Modification, Module: Module Load, Process: Process Creation, Service: Service Metadata, Windows Registry: Windows Registry Key Modification",False,,"['Anti-virus', 'Application Control']",,,,,,,"(Citation: Mandiant APT41),(Citation: Cybereason Cobalt Kitty 2017),(Citation: FOX-IT May 2016 Mofang),(Citation: CyberBit Dtrack),(Citation: Microsoft Dynamic-Link Library Security),(Citation: Vulnerability and Exploit Detector),(Citation: Microsoft CreateProcess),(Citation: Powersploit),(Citation: Microsoft Dynamic Link Library Search Order),(Citation: Executable Installers are Vulnerable),(Citation: Microsoft More information about DLL),(Citation: FireEye DLL Side-Loading)"
T1574.001,Hijack Execution Flow: DLL Search Order Hijacking,"Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.

There are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)

Adversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)

If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",https://attack.mitre.org/techniques/T1574/001,13 March 2020,30 March 2023,1.1,"Defense Evasion, Persistence, Privilege Escalation","Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of `.manifest` and `.local` redirection files that do not correlate with software updates are suspicious.",['Windows'],"File: File Creation, File: File Modification, Module: Module Load",True,T1574,,"Stefan Kanthak; Travis Smith, Tripwire",,,,,,"(Citation: Securelist BlackOasis Oct 2017),(Citation: ESET Crutch December 2020),(Citation: MSTIC FoggyWeb September 2021),(Citation: Crowdstrike GTR2020 Mar 2020),(Citation: PWC Cloud Hopper April 2017),(Citation: Palo Alto Brute Ratel July 2022),(Citation: Group IB RTM August 2019),(Citation: ESET EvilNum July 2020),(Citation: FireEye FIN7 Oct 2019),(Citation: APT15 Intezer June 2018),(Citation: Cybereason Chaes Nov 2020),(Citation: Eset Ramsay May 2020),(Citation: FireEye Hikit Rootkit),(Citation: ESET InvisiMole June 2018),(Citation: Proofpoint TA416 Europe March 2022),(Citation: ESET Operation Groundbait),(Citation: NCC Group WastedLocker June 2020),(Citation: Mandiant APT1 Appendix),(Citation: Securelist Brazilian Banking Malware July 2020),(Citation: Nccgroup Emissary Panda May 2018),(Citation: FinFisher Citation),(Citation: GitHub PowerSploit May 2012),(Citation: FireEye APT10 April 2017),(Citation: CrowdStrike AQUATIC PANDA December 2021),(Citation: ESET Exchange Mar 2021),(Citation: Github PowerShell Empire),(Citation: ESET Sednit Part 3),(Citation: PowerSploit Documentation),(Citation: ZScaler Hacking Team),(Citation: Symantec Whitefly March 2019),(Citation: ESET BackdoorDiplomacy Jun 2021),(Citation: Powersploit),(Citation: Microsoft Sxstrace),(Citation: Microsoft Dynamic Link Library Search Order),(Citation: Microsoft More information about DLL)"
T1574.002,Hijack Execution Flow: DLL Side-Loading,"Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).

Side-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.(Citation: FireEye DLL Side-Loading)",https://attack.mitre.org/techniques/T1574/002,13 March 2020,30 March 2023,2.0,"Defense Evasion, Persistence, Privilege Escalation","Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so) as well as the introduction of new files/programs. Track DLL metadata, such as a hash, and compare DLLs that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.",['Windows'],"File: File Creation, File: File Modification, Module: Module Load, Process: Process Creation",True,T1574,"['Anti-virus', 'Application Control']",,,,,,,"(Citation: Palo Alto Networks BBSRAT),(Citation: Bitdefender Naikon April 2021),(Citation: Anomali MUSTANG PANDA October 2019),(Citation: Securelist APT10 March 2021),(Citation: Trend Micro DRBControl February 2020),(Citation: Unit 42 KerrDown February 2019),(Citation: SentinelLabs Metador Technical Appendix Sept 2022),(Citation: Recorded Future REDDELTA July 2020),(Citation: FireEye APT10 Sept 2018),(Citation: PaloAlto Patchwork Mar 2018),(Citation: FireEye Clandestine Fox Part 2),(Citation: CitizenLab KeyBoy Nov 2016),(Citation: Unit42 Emissary Panda May 2019),(Citation: Talent-Jump Clambling February 2020),(Citation: Profero APT27 December 2020),(Citation: Palo Alto Brute Ratel July 2022),(Citation: Deep Instinct Black Basta August 2022),(Citation: Forcepoint Monsoon),(Citation: DHS CISA AA22-055A MuddyWater February 2022),(Citation: Cybereason OperationCuckooBees May 2022),(Citation: TrendMicro EarthLusca 2022),(Citation: Medium Metamorfo Apr 2020),(Citation: Stewart 2014),(Citation: CYBERCOM Iranian Intel Cyber January 2022),(Citation: Trend Micro Iron Tiger April 2021),(Citation: Cybereason Cobalt Kitty 2017),(Citation: CheckPoint Naikon May 2020),(Citation: Secureworks BRONZE PRESIDENT December 2019),(Citation: Cybereason Oceanlotus May 2017),(Citation: Proofpoint TA416 November 2020),(Citation: Palo Alto T9000 Feb 2016),(Citation: TrendMicro Patchwork Dec 2017),(Citation: MalwareBytes SideCopy Dec 2021),(Citation: Anomali Pirate Panda April 2020),(Citation: NCC Group Chimera January 2021),(Citation: Kaspersky LuminousMoth July 2021),(Citation: PWC Cloud Hopper Technical Annex April 2017),(Citation: Trend Micro Waterbear December 2019),(Citation: Dell Sakula),(Citation: ESET Twitter Ida Pro Nov 2021),(Citation: Arbor Musical Chairs Feb 2018),(Citation: Symantec Cicada November 2020),(Citation: Microsoft Wingbird Nov 2017),(Citation: Securelist Brazilian Banking Malware July 2020),(Citation: Proofpoint LookBack Malware Aug 2019),(Citation: Cybereason Soft Cell June 2019),(Citation: Securelist LuckyMouse June 2018),(Citation: FinFisher Citation),(Citation: ATT Sidewinder January 2021),(Citation: ESET Casbaneiro Oct 2019),(Citation: FireEye Clandestine Fox),(Citation: Proofpoint ZeroT Feb 2017),(Citation: Proofpoint TA459 April 2017),(Citation: Bitdefender LuminousMoth July 2021),(Citation: FireEye APT41 Aug 2019),(Citation: Unit 42 C0d0so0 Jan 2016),(Citation: ESET OceanLotus Mar 2019),(Citation: Lunghi Iron Tiger Linux),(Citation: Palo Alto PlugX June 2017),(Citation: Dell TG-3390),(Citation: Microsoft SIR Vol 21),(Citation: Cyble Egregor Oct 2020),(Citation: FireEye Metamorfo Apr 2018),(Citation: Microsoft FinFisher March 2018),(Citation: PTSecurity Higaisa 2020),(Citation: Bitdefender FunnyDream Campaign November 2020),(Citation: SecureWorks BRONZE UNION June 2017),(Citation: Trend Micro Tick November 2019),(Citation: FireEye DLL Side-Loading)"
T1574.004,Hijack Execution Flow: Dylib Hijacking,"Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with <code>@rpath</code>, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable.  Additionally, if weak linking is used, such as the <code>LC_LOAD_WEAK_DYLIB</code> function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.

Adversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.(Citation: Wardle Dylib Hijack Vulnerable Apps)(Citation: Wardle Dylib Hijacking OSX 2015)(Citation: Github EmpireProject HijackScanner)(Citation: Github EmpireProject CreateHijacker Dylib) Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.(Citation: Writing Bad Malware for OSX)(Citation: wardle artofmalware volume1)(Citation: MalwareUnicorn macOS Dylib Injection MachO)",https://attack.mitre.org/techniques/T1574/004,16 March 2020,30 March 2023,2.0,"Defense Evasion, Persistence, Privilege Escalation","Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. 

Run path dependent libraries can include <code>LC_LOAD_DYLIB</code>, <code>LC_LOAD_WEAK_DYLIB</code>, and <code>LC_RPATH</code>. Other special keywords are recognized by the macOS loader are <code>@rpath</code>, <code>@loader_path</code>, and <code>@executable_path</code>.(Citation: Apple Developer Doco Archive Run-Path) These loader instructions can be examined for individual binaries or frameworks using the <code>otool -l</code> command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking.(Citation: Wardle Dylib Hijack Vulnerable Apps)(Citation: Github EmpireProject HijackScanner)",['macOS'],"File: File Creation, File: File Modification, Module: Module Load",True,T1574,['Application Control'],,,,,,,"(Citation: Github PowerShell Empire),"
T1574.005,Hijack Execution Flow: Executable Installer File Permissions Weakness,"Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.

ullother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).

Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002). Several examples of this weakness in existing common installers have been reported to software vendors.(Citation: mozilla_sec_adv_2012)  (Citation: Executable Installers are Vulnerable) If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",https://attack.mitre.org/techniques/T1574/005,13 March 2020,26 March 2020,1.0,"Defense Evasion, Persistence, Privilege Escalation","Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.

Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.",['Windows'],"File: File Creation, File: File Modification, Module: Module Load, Process: Process Creation, Service: Service Metadata",True,T1574,,"Stefan Kanthak; Travis Smith, Tripwire","['Administrator', 'User']",,,,"Administrator, SYSTEM, User",",(Citation: Powersploit),(Citation: Executable Installers are Vulnerable)"
T1574.006,Hijack Execution Flow: Dynamic Linker Hijacking,"Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code> on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.(Citation: Baeldung LD_PRELOAD)

On Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the <code>export</code> command, <code>setenv</code> function, or <code>putenv</code> function. Adversaries can also leverage [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) to export variables in a shell or set variables programmatically using higher level syntax such Python’s <code>os.environ</code>.

On Linux, adversaries may set <code>LD_PRELOAD</code> to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. <code>LD_PRELOAD</code> can be set via the environment variable or <code>/etc/ld.so.preload</code> file.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries) Libraries specified by <code>LD_PRELOAD</code> are loaded and mapped into memory by <code>dlopen()</code> and <code>mmap()</code> respectively.(Citation: Code Injection on Linux and macOS)(Citation: Uninformed Needle) (Citation: Phrack halfdead 1997)(Citation: Brown Exploiting Linkers) 

On macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the <code>DYLD_INSERT_LIBRARIES</code> environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.(Citation: TheEvilBit DYLD_INSERT_LIBRARIES)(Citation: Timac DYLD_INSERT_LIBRARIES)(Citation: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) ",https://attack.mitre.org/techniques/T1574/006,13 March 2020,30 March 2023,2.0,"Defense Evasion, Persistence, Privilege Escalation","Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes.

Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.","['Linux', 'macOS']","Command: Command Execution, File: File Creation, File: File Modification, Module: Module Load, Process: Process Creation",True,T1574,,,['User'],,,,,"(Citation: Anomali Rocke March 2019),(Citation: Crowdstrike GTR2020 Mar 2020),(Citation: trendmicro xcsset xcode project 2020),(Citation: ESET Ebury Oct 2017),(Citation: Intezer HiddenWasp Map 2019),(Citation: Unit 42 Hildegard Malware),(Citation: Apple Developer Doco Hardened Runtime)"
T1574.007,Hijack Execution Flow: Path Interception by PATH Environment Variable,"Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.

The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, <code>%SystemRoot%\system32</code> (e.g., <code>C:\Windows\system32</code>), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.

For example, if <code>C:\example path</code> precedes </code>C:\Windows\system32</code> is in the PATH environment variable, a program that is named net.exe and placed in <code>C:\example path</code> will be called instead of the Windows system ""net"" when ""net"" is executed from the command-line.",https://attack.mitre.org/techniques/T1574/007,13 March 2020,30 March 2023,1.0,"Defense Evasion, Persistence, Privilege Escalation","Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as ""findstr,"" ""net,"" and ""python""). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.

Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",['Windows'],"File: File Creation, Process: Process Creation, Windows Registry: Windows Registry Key Modification",True,T1574,['Application Control'],Stefan Kanthak,,,,,,"(Citation: Github PowerShell Empire),(Citation: GitHub PowerSploit May 2012),(Citation: PowerSploit Documentation),(Citation: Microsoft Dynamic-Link Library Security),(Citation: Windows Commands JPCERT),(Citation: Vulnerability and Exploit Detector),(Citation: Microsoft CreateProcess),(Citation: SANS Application Whitelisting),(Citation: NSA MS AppLocker),(Citation: Microsoft Using Software Restriction ),(Citation: Microsoft Windows Defender Application Control),(Citation: Microsoft Application Lockdown)"
T1574.008,Hijack Execution Flow: Path Interception by Search Order Hijacking,"Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.

Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.

For example, ""example.exe"" runs ""cmd.exe"" with the command-line argument <code>net user</code>. An adversary may place a program called ""net.exe"" within the same directory as example.exe, ""net.exe"" will be run instead of the Windows system utility net. In addition, if an adversary places a program called ""net.com"" in the same directory as ""net.exe"", then <code>cmd.exe /C net user</code> will execute ""net.com"" instead of ""net.exe"" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)

Search order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).",https://attack.mitre.org/techniques/T1574/008,13 March 2020,30 March 2023,1.0,"Defense Evasion, Persistence, Privilege Escalation","Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as ""findstr,"" ""net,"" and ""python""). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.

Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.
",['Windows'],"File: File Creation, File: File Modification, Process: Process Creation",True,T1574,,Stefan Kanthak,"['Administrator', 'SYSTEM', 'User']",,,,"Administrator, SYSTEM, User","(Citation: Github PowerShell Empire),(Citation: GitHub PowerSploit May 2012),(Citation: PowerSploit Documentation),(Citation: Microsoft Dynamic-Link Library Security),(Citation: Windows Commands JPCERT),(Citation: Vulnerability and Exploit Detector),(Citation: Microsoft CreateProcess),(Citation: SANS Application Whitelisting),(Citation: NSA MS AppLocker),(Citation: Microsoft Using Software Restriction ),(Citation: Microsoft Windows Defender Application Control),(Citation: Microsoft Application Lockdown)"
T1574.009,Hijack Execution Flow: Path Interception by Unquoted Path,"Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.

Service paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\unsafe path with space\program.exe</code> vs. <code>""C:\safe path with space\program.exe""</code>). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\program files\myapp.exe</code>, an adversary may create a program at <code>C:\program.exe</code> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)

This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",https://attack.mitre.org/techniques/T1574/009,13 March 2020,30 March 2023,1.1,"Defense Evasion, Persistence, Privilege Escalation","Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as ""findstr,"" ""net,"" and ""python""). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.

Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",['Windows'],"File: File Creation, File: File Modification, Process: Process Creation",True,T1574,,Stefan Kanthak,,,,,,"(Citation: Github PowerShell Empire),(Citation: GitHub PowerSploit May 2012),(Citation: PowerSploit Documentation),(Citation: Microsoft Dynamic-Link Library Security),(Citation: Windows Commands JPCERT),(Citation: Vulnerability and Exploit Detector),(Citation: Microsoft CreateProcess),(Citation: SANS Application Whitelisting),(Citation: NSA MS AppLocker),(Citation: Microsoft Using Software Restriction ),(Citation: Microsoft Windows Defender Application Control),(Citation: Microsoft Application Lockdown)"
T1574.010,Hijack Execution Flow: Services File Permissions Weakness,"Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.

Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",https://attack.mitre.org/techniques/T1574/010,12 March 2020,30 March 2023,1.0,"Defense Evasion, Persistence, Privilege Escalation","Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.

Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques. ",['Windows'],"File: File Creation, File: File Modification, Process: Process Creation, Service: Service Metadata",True,T1574,,"Stefan Kanthak; Travis Smith, Tripwire","['Administrator', 'User']",,,,"Administrator, SYSTEM, User","(Citation: F-Secure BlackEnergy 2014),(Citation: Powersploit),(Citation: Executable Installers are Vulnerable)"
T1574.012,Hijack Execution Flow: COR_PROFILER,"Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)

The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft COR_PROFILER Feb 2013)

Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002)) if the victim .NET process executes at a higher permission level, as well as to hook and [Impair Defenses](https://attack.mitre.org/techniques/T1562) provided by .NET processes.(Citation: RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation: Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation: subTee .NET Profilers May 2017)",https://attack.mitre.org/techniques/T1574/012,24 June 2020,30 August 2021,1.0,"Defense Evasion, Persistence, Privilege Escalation","For detecting system and user scope abuse of the COR_PROFILER, monitor the Registry for changes to COR_ENABLE_PROFILING, COR_PROFILER, and COR_PROFILER_PATH that correspond to system and user environment variables that do not correlate to known developer tools. Extra scrutiny should be placed on suspicious modification of these Registry keys by command line tools like wmic.exe, setx.exe, and [Reg](https://attack.mitre.org/software/S0075), monitoring for command-line arguments indicating a change to COR_PROFILER variables may aid in detection. For system, user, and process scope abuse of the COR_PROFILER, monitor for new suspicious unmanaged profiling DLLs loading into .NET processes shortly after the CLR causing abnormal process behavior.(Citation: Red Canary COR_PROFILER May 2020) Consider monitoring for DLL files that are associated with COR_PROFILER environment variables.",['Windows'],"Command: Command Execution, Module: Module Load, Process: Process Creation, Windows Registry: Windows Registry Key Modification",True,T1574,,"Jesse Brown, Red Canary","['Administrator', 'User']",,,,,"(Citation: RedCanary Mockingbird May 2020),(Citation: Secureworks DarkTortilla Aug 2022),(Citation: Windows Commands JPCERT),(Citation: Beechey 2010),(Citation: NSA MS AppLocker)"
T1574.013,Hijack Execution Flow: KernelCallbackTable,"Adversaries may abuse the <code>KernelCallbackTable</code> of a process to hijack its execution flow in order to run their own payloads.(Citation: Lazarus APT January 2022)(Citation: FinFisher exposed ) The <code>KernelCallbackTable</code> can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once <code>user32.dll</code> is loaded.(Citation: Windows Process Injection KernelCallbackTable)

ull adversary may hijack the execution flow of a process using the <code>KernelCallbackTable</code> by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as [Reflective Code Loading](https://attack.mitre.org/techniques/T1620) or [Process Injection](https://attack.mitre.org/techniques/T1055) into another process.

A pointer to the memory address of the <code>KernelCallbackTable</code> can be obtained by locating the PEB (ex: via a call to the <code>NtQueryInformationProcess()</code> [Native API](https://attack.mitre.org/techniques/T1106) function).(Citation: NtQueryInformationProcess) Once the pointer is located, the <code>KernelCallbackTable</code> can be duplicated, and a function in the table (e.g., <code>fnCOPYDATA</code>) set to the address of a malicious payload (ex: via <code>WriteProcessMemory()</code>). The PEB is then updated with the new address of the table. Once the tampered function is invoked, the malicious payload will be triggered.(Citation: Lazarus APT January 2022)

The tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the <code>KernelCallbackTable</code> may also be restored to its original state by the rest of the malicious payload.(Citation: Lazarus APT January 2022) Use of the <code>KernelCallbackTable</code> to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.",https://attack.mitre.org/techniques/T1574/013,25 February 2022,22 March 2022,1.0,"Defense Evasion, Persistence, Privilege Escalation","Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious behaviors that could relate to post-compromise behavior.

Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances. for known bad sequence of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>WriteProcessMemory()</code> and <code>NtQueryInformationProcess()</code> with the parameter set to <code>ProcessBasicInformation</code> may be used for this technique.(Citation: Lazarus APT January 2022)",['Windows'],Process: OS API Execution,True,T1574,,,,,,,,"(Citation: Qualys LolZarus),(Citation: FinFisher exposed ),(Citation: Lazarus APT January 2022),"
